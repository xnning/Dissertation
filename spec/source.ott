metavar typvar, a {{ tex a }}, b {{tex b}}, L ::=
metavar kindvar, Xa {{ tex \widehat{\alpha} }}, Xb {{ tex \widehat{\beta} }} ::=

metavar expvar, x, y, f, g, m, nn {{ tex n }}, c, xs, fix {{ tex \mathsf{fix} }}, len, l ::=

indexvar index, i, j, n, m ::=

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% DECL TYPE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

grammar

% Types

mode :: 'mode_' ::=
  | =>       ::  :: infer {{ tex \Rightarrow }}
  | <=       ::  :: check {{ tex \Leftarrow }}

prmode, pm {{ tex \otimes }} :: 'prmode_'  ::=
  | +       ::  :: postive  {{ tex + }}
  | -       ::  :: negative {{ tex - }}
  | - pm    ::  :: negate   {{ tex - [[pm]] }}

varset, avs  :: 'varset_' ::=
  | a                        ::  :: a
  | x                        ::  :: x {{ tex x }}
  | avs1 , .. , avs2         ::  :: append
  | fv ( dd )                ::  :: fv_dd
  | fv ( GG )                ::  :: fv_gg
  | fv ( A )                 ::  :: fv_A
  | fv ( aA )                ::  :: fv_aA
  | fv ( ef )                ::  :: fv_ef
  | avs set                  ::  :: a_set {{ tex \overbar{[[avs]]} }}
  | avs1 - avs2              ::  :: minus {{ tex [[avs1]] - [[avs2]] }}

dtyp, A {{tex \sigma}}, B {{tex \sigma_2}}, C {{tex \sigma_3}}, D {{tex \sigma_4}} :: 'dtyp_' ::=
  | int            ::   :: int
  | nat            ::   :: nat
  | natu           ::   :: natu {{ tex \mathsf{Nat}_\unknown }}
  | float          ::   :: float
  | bool           ::   :: bool
  | boolu          ::   :: boolu {{ tex \mathsf{Bool}_\unknown }}
  | top            ::   :: top
  | a              ::   :: tvar
  | A -> B         ::   :: arrow
  | \/ varset . A  ::   :: all
  | \/ varset . t  ::   :: all_mono
  | mu a . A       ::   :: mu {{ tex \mu [[a]] [[.]] [[A]] }}
  | unknown        ::   :: unknown
  | question       ::   :: question
  | static         ::   :: static
  | gradual        ::   :: gradual
  | List A         ::   :: list
  | Listu A        ::   :: listu
  | A [ </  Ai ~> Bi // i /> ]  :: M :: subst
  | [ OO ] aA      :: S :: ctx_subst
  | [ OO ] A       :: S :: ctx_subst2
  | ( A )          :: S :: parens
  | r @ ( A )      :: S :: red   {{ tex {\color{red} [[A]] } }}
  | b @ ( A )      :: S :: blue {{ tex {\color{blue} [[A]] } }}
  | o @ ( A )      :: S :: orange {{ tex {\color{orange} [[A]] } }}
  | r @ \/ a . A   :: S :: red_all {{ tex [[\/]] {\color{red} [[a]]} . [[A]] }}
  | b @ \/ a . A   :: S :: blue_all {{ tex [[\/]] {\color{blue} [[a]]} . [[A]] }}
  | S ( A )        :: S :: subst2
  | ss -> A        ::   :: sctx_type
  | ( A , B )      ::   :: pair
  | [ l1 : A1 , .. , ln : An  ]  ::   :: record
  | erase [ A ]    ::  :: erasetp {{ tex \lceil{[[A]]}\rceil }}

% Mono Types

dtyp_mono, t {{ tex \tau }}, s {{ tex \tau }} :: 'dtyp_mono_' ::=
  | int       ::   :: int
  | a         ::   :: tvar
  | t -> s    ::   :: arrow
  | static    ::   :: static
  | gradual   ::   :: gradual
  | t [ </  ti ~>  si // i /> ]  :: M :: subst

% Castable Mono Types

dtyp_mono_cast, tc {{ tex t }} :: 'dtyp_mono_cast_' ::=
  | int        :: :: int
  | a          :: :: tvar
  | tc1 -> tc2 :: :: arrow
  | gradual    :: :: gradual

% Castable Types

dtyp_castable, gc  {{ tex \mathbb{C} }}  :: 'dtyp_castable_' ::=
  | int        :: :: int
  | a          :: :: tvar
  | gc1 -> gc2 :: :: arrow
  | \/ varset . gc  :: :: all
  | unknown    :: :: unknown
  | gradual    :: :: gradual


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% ALGO TYPE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% Existential variable

evar {{ tex \widehat{\alpha} }}, evarb {{ tex \widehat{\beta} }} :: 'evar_' ::=
  | sa :: :: evar {{ tex \widehat{\alpha}_{S} }}
  | ga :: :: gevar {{ tex \widehat{\alpha}_{G} }}
  | sb :: :: evarb {{ tex \widehat{\beta}_{S} }}
  | gb :: :: gevarb {{ tex \widehat{\beta}_{G} }}
  | Xa :: :: xa


% marker
ma :: 'ma_' ::=
  | mevar :: :: mevar   {{ tex \blacktriangleright_{ \widehat{\alpha} } }}
  | mevarb :: :: mevarb   {{ tex \blacktriangleright_{ \widehat{\beta} } }}
  | msa :: :: msa  {{ tex \blacktriangleright_{ \widehat{a}_S } }}
  | msb :: :: msb  {{ tex \blacktriangleright_{ \widehat{b}_S } }}


% Types

atyp, aA {{ tex \sigma }}, aB, aC  :: 'atyp_' ::=
  | int            ::   :: int
  | a              ::   :: tvar
  | evar           ::   :: evar
  | aA1 -> aA2     ::   :: arrow
  | \/ a . aA      ::   :: all
  | unknown        ::   :: unknown
  | static         ::   :: static
  | gradual        ::   :: gradual
  | aA [ a ~> at ] :: M :: subst
  | [ GG ] aA      :: S :: ctx_subst
  | ( aA )         :: S :: parens

% Static Types

atyp_static, aT {{ tex T }} :: 'atyp_static_' ::=
  | int        ::   :: int
  | a          ::   :: tvar
  | evar       ::   :: evar
  | aT1 -> aT2 ::   :: arrow
  | \/ a . aT  ::   :: all
  | static     ::   :: static
  | gradual    ::   :: gradual
  | [ GG ] aA  :: S :: ctx_subst

% Mono Types

atyp_mono, at {{ tex \tau }}, as {{ tex \sigma }} :: 'atyp_mono_' ::=
  | int       ::   :: int
  | a         ::   :: tvar
  | evar      ::   :: evar
  | at -> as  ::   :: arrow
  | static    ::   :: static
  | gradual   ::   :: gradual
  | [ GG ] aA :: S :: ctx_subst

% Castable Mono Types

atyp_mono_cast, atc {{ tex t }} :: 'atyp_mono_cast_' ::=
  | int          :: :: int
  | a            :: :: tvar
  | evar         :: :: evar
  | atc1 -> atc2 :: :: arrow
  | gradual      :: :: gradual

% Castable Types

atyp_castable, agc  {{ tex \mathbb{C} }}  :: 'atyp_castable_' ::=
  | int          :: :: int
  | a            :: :: tvar
  | evar         :: :: evar
  | agc1 -> agc2 :: :: arrow
  | \/ a . agc   :: :: all
  | unknown      :: :: unknown
  | gradual      :: :: gradual

% Static Castable Types
atyp_scastable, asc {{ tex \mathbb{S} }} :: 'atyp_scastable_' ::=
  | int          :: :: int
  | a            :: :: tvar
  | evar         :: :: evar
  | asc1 -> asc2 :: :: arrow
  | \/ a . asc   :: :: all
  | gradual      :: :: gradual




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% DECL EXPR
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

dexp, e :: 'dtrm_' ::=
  | 1                ::   :: one
  | 2                ::   :: two
  | 3                ::   :: three
  | x                ::   :: var
  | id               ::   :: id {{ tex \mathsf{id} }}
  | n                ::   :: lit
  | cons             ::   :: cons
  | consu             ::   :: consu
  | nil              ::   :: nilu
  | nilu              ::   :: nil
  | zerou            :: :: zero {{ tex \mathsf{zero}_\unknown }}
  | succu            :: :: succu {{ tex \mathsf{succ}_\unknown }}
  | trueu            :: :: trueu {{ tex \mathsf{true}_\unknown }}
  | true             :: :: true  {{ tex \mathsf{true} }}
  | fold [ A ]       ::   :: fold  {{ tex [[fold]]_{[[A]]} }}
  | unfold [ A ]       ::   :: unfold  {{ tex [[unfold]]_{[[A]]} }}
  | \ x . e          ::   :: abs
  | \ x : A . e      ::   :: absan
  | e1 e2            ::   :: app {{ tex [[e1]]~[[e2]] }}
  | let x = e1 in e2 ::   :: let
  | let x : A = e1 in e2 ::   :: letann
  | ( e )            :: S :: paren
  | e : A            :: S :: anno
  | ( e1 , e2 )      ::   :: pair
  | 'a'              ::   :: a
  | fst              ::   :: fst
  | snd              ::   :: snd
  | e1 + e2          ::   :: plus
  | | e |            ::   :: erase


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% ALGO EXPR
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

aexp, ae {{ tex e }} :: 'atrm_' ::=
  | x                  ::   :: var
  | n                  ::   :: lit
  | \ x . ae           ::   :: abs
  | \ x : aA . ae      ::   :: absan
  | ae1 ae2            ::   :: app {{ tex [[ae1]]~[[ae2]] }}
  | ae : aA            ::   :: anno
  | let x = ae1 in ae2 ::   :: let
  | ( ae )             :: S :: paren
  | | ae |             ::   :: erase



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% DECL CONTEXT
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

dctx, dd {{ tex \Psi}} :: 'dctx_' ::=
  | empty       ::   :: empty
  | dd , x : A  ::   :: cons_var
  | dd , f : A  ::   :: cons_var_f
  | dd , a      ::   :: cons_tvar
  | [ OO ] DD     :: S :: ctx_subst

sctx, ss {{ tex \Sigma }} :: 'sctx_' ::=
  | empty       ::   :: empty
  | A           ::   :: singleton
  | ss1 , ss2   ::   :: append


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% ALGO CONTEXT
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

actx, GG {{ tex \Gamma}}, DD {{ tex \Delta }}, TT  {{ tex \Theta }}, OO {{ tex \Omega }}, DL {{ tex \Delta_L }}, DR {{ tex \Delta_R }}, GL {{ tex \Gamma_L }}, GR {{ tex \Gamma_R }}, GM {{ tex \Gamma_M }}, OL {{ tex \Omega_L }} , OR {{ tex \Omega_R }} :: 'actx_' ::=
  | empty                                          ::   :: empty
  | GG , x : aA                                    ::   :: cons_var
  | GG , a                                         ::   :: cons_tvar
  | GG , ma                                        ::   :: cons_mark
  | GG , evar                                      ::   :: cons_evar
  | GG , evar = at                                 ::   :: cons_evar_solu
  | GG [ a ]                                       :: S :: ctx_tvar
  | GG [ evar ]                                    :: S :: ctx_etvar
  | GG [ GG1 ]                                     :: S :: ctx_ctx
  | GG [ evar1 , evar2 ]                           :: S :: ctx_etvar2
  | GG [ evar1 , evar2 , evar3 ]                   :: S :: ctx_etvar3
  | GG [ evar = at ]                               :: S :: ctx_etvar_solve
  | GG [ evar1 , evar2 = at ]                      :: S :: ctx_etvar_solve2
  | GG [ evar1 , evar2 , evar3 = at ]              :: S :: ctx_etvar_solve3
  | GG [ evar1 = at1 , evar2 = at2 , evar3 = at3 ] :: S :: ctx_etvar_solve4
  | GG [ evar1 = at1 , evar2 = at2 ]               :: S :: ctx_etvar_solve5
  | GG , a , DD                                    :: S :: middle
  | GG , x : aA , DD                               :: S :: middle2
  | GG , evar , DD                                 :: S :: middle3
  | GG , evar = at , DD                            :: S :: middle4
  | GG , DD                                        :: S :: ext
  | ( GG )                                         :: S :: parens
  | [ aA ] GG                                      :: S :: subst_ctx {{ tex  \mathsf{contaminate}( [[GG]] , [[aA]] ) }}
  | | GG |                                         :: S :: solve_ctx
  | evar    :: S :: singleton


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% F EXPR
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

fexp, es {{tex s}}, ef {{tex f}} :: 'ftrm_' ::=
  | 1              ::   :: one
  | x              ::   :: var
  | n              ::   :: lit
  | \ x : A . es   ::   :: absann
  | \ x . es       ::   :: abs
  | /\ avs . es    ::   :: tabs
  | es A           ::   :: tapp
  | es1 es2        ::   :: app
  | ( es )         :: S :: paren
  | | es |         ::   :: erase

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% PBC EXPR
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

pexp, pe {{ tex s }}, rpe {{ tex r }}, CC {{ tex \mathcal{C} }} :: 'ptrm_' ::=
  | 1              ::   :: one
  | x              ::   :: var
  | f              ::   :: f
  | n              ::   :: lit
  | \ x : A . pe   ::   :: absann
  | pe1 pe2        ::   :: app {{ tex [[pe1]]~[[pe2]] }}
  | /\ a . pe      ::   :: tabs
  | < A `-> B > pe ::   :: cast
  | ( pe )         :: S :: paren
  | S ( pe )       :: S :: subst

pvalue, pv {{ tex v }} :: 'pvalue_' ::=
  | n              ::   :: lit
  | \ x : A . pe   ::   :: absann
  | /\ a . pe      ::   :: tabs

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% TERMINALS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

terminals :: 'terminals_' ::=
  | ok      :: :: ok {{ tex \mathsf{ok} }}
  | ~       :: :: consist {{ tex \sim }}
  | ~=      :: :: approx {{ tex \approx }}
  | ->      :: :: arrow   {{ tex \rightarrow }}
  | let     :: :: let     {{ tex \mathbf{let} }}
  | fst     :: :: fst     {{ tex \mathbf{fst} }}
  | snd     :: :: snd     {{ tex \mathbf{snd} }}
  | int     :: :: int     {{ tex \mathsf{Int} }}
  | nat     :: :: nat     {{ tex \mathsf{Nat} }}
  | bool    :: :: bool    {{ tex \mathsf{Bool} }}
  | top     :: :: top     {{ tex \top }}
  | float     :: :: float     {{ tex \mathsf{Float} }}
  | notin    ::  :: notin {{ tex \notin       }}
  | fv       ::  :: fv {{ tex \textsc{fv}  }}
  | List     ::  :: list  {{ tex \mathsf{List} }}
  | Listu    ::  :: listu {{ tex \mathsf{List}_\unknown }}
  | n       :: :: lit     {{ tex \mathsf{n} }}
  | cons       :: :: cons     {{ tex \mathsf{cons} }}
  | consu       :: :: consu     {{ tex \mathsf{cons}_\unknown }}
  | nil       :: :: nil     {{ tex \mathsf{nil} }}
  | nilu       :: :: nilu     {{ tex \mathsf{nil}_\unknown }}
  | fold      :: :: fold   {{ tex \mathbf{fold} }}
  | unfold      :: :: unfold   {{ tex \mathbf{unfold} }}
  | .       :: :: dot     {{ tex .\, }}
  | unknown :: :: unknown {{ tex \mathit{\qm} }}
  | question ::  :: question {{ tex \mathit{?} }}
  | empty   :: :: empty   {{ tex \bullet }}
  | |-      :: :: turnstile {{ tex \vdash }}
  | |-OL    :: :: turnstile1 {{ tex \vdash^\mathit{OL} }}
  | |-HM    :: :: turnstile2 {{ tex \vdash^\mathit{HM} }}
  | |-DK    :: :: turnstile3 {{ tex \vdash^\mathit{DK} }}
  | |-AP    :: :: turnstile4 {{ tex \vdash^\mathit{AP} }}
  | |-F     :: :: turnstileF {{ tex \vdash^\mathit{F} }}
  | |-G     :: :: turnstileG {{ tex \vdash^\mathit{G} }}
  | |-Gm    :: :: turnstilem {{ tex \vdash^\mathit{G}_{m} }}
  | |-pr    :: :: turnstilepr {{ tex \vdash^{\!\!\mathsf{pr} } }}
  | |-u     :: :: turnstileu {{ tex \vdash^{\!\!\mathsf{u} } }}
  | |-sub   :: :: turnstilesub {{ tex \vdash^{\!\!\mathsf{sub} } }}
  | -|      :: :: dashv {{ tex \dashv }}
  | ~>      :: :: mapsto    {{ tex \mapsto }}
  | <~      :: :: conssub   {{ tex \lesssim }}
  | <~~     :: :: inst   {{ tex \lessapprox }}
  | \       :: :: lambda    {{ tex \lambda }}
  | ~~>     :: :: translate {{ tex \rightsquigarrow }}
  | /\      :: :: tlambda   {{ tex \Lambda }}
  | \/      :: :: forall   {{ tex \forall }}
  | `->     :: :: cast      {{ tex \hookrightarrow }}
  | <       :: :: lbr  {{ tex \langle }}
  | >       :: :: rbr  {{ tex \rangle }}
  | static  :: :: sta {{ tex \mathcal{S} }}
  | gradual :: :: gra {{ tex \mathcal{G} }}
  | |>      :: :: match {{ tex \triangleright  }}
  | =>      :: :: inf   {{ tex \Rightarrow }}
  | <=      :: :: chk   {{ tex \Leftarrow }}
  | =>=>    :: :: application {{ tex \Rightarrow\!\!\!\!\Rightarrow }}
  | -->     :: :: ext   {{ tex \longrightarrow }}
  | S       :: :: psubst {{ tex \psubst }}
  | blame   :: :: blame  {{ tex \mathsf{blame} }}
  | ==>     :: :: reduce {{ tex \Downarrow }}
  | <:      :: :: subtype {{ tex <: }}
  | =nid    :: :: etaid {{ tex =_{\eta id} }}
  | <<=     :: :: tless  {{ tex \sqsubseteq }}


formula :: formula_ ::=
  | judgement             :: :: judgement
  | formula1 .. formulan            ::   :: dots
  | dd |- e => A          :: :: ap_inf_introduction
  | dd ; ss |- e => A     :: :: ap_app_introduction
  | |- A1 <: A2           :: :: ap_sub_introduction
  | ss |- A1 <: A2        :: :: ap_sub_introduction2
  | dd |-AP e => A        :: :: ap_inf_no_trans
  | dd ; ss |-AP e => A   :: :: ap_app_no_trans
  | |-AP A1 <: A2         :: :: ap_sub_no_trans
  | ss |-AP A1 <: A2      :: :: ap_app_sub_no_trans
  | a in dd               :: :: bind_tvar {{ tex [[a]] \in [[dd]] }}
  | r @ ( a ) in dd       :: :: bind_red_tvar {{ tex {\color{red} [[a]] } \in [[dd]] }}
  | b @ ( a ) in dd       :: :: bind_blue_tvar {{ tex {\color{blue} [[a]] } \in [[dd]] }}
  | a in GG               :: :: bind_tvar2 {{ tex [[a]] \in [[GG]] }}
  | ( x : A ) in dd       :: :: bind_var {{ tex ( [[x]] : [[A]] ) \in [[dd]] }}
  | ( x : aA ) in GG      :: :: bind_var2 {{ tex ( [[x]] : [[aA]] ) \in [[GG]] }}
  | evar in fv ( aA )     :: :: fv {{ tex [[evar]] \in \textsc{fv} ( [[aA]] ) }}
  | evar notin fv ( aA )  :: :: nfv {{ tex [[evar]] \notin \textsc{fv} ( [[aA]] ) }}
  | evar notin fv ( GG )  :: :: dfv {{ tex [[evar]] \notin \textsc{fv} ( [[GG]] ) }}
  | varset1 notin varset2     :: :: notin_varset
  | ma notin fv ( GG )     :: :: mafv {{ tex [[ma]] \notin \textsc{fv} ( [[GG]] ) }}
  | aA1 = aA2             :: :: eq
  | dd |- e : A           :: :: typ
  | dd |- e => A           :: :: typ_inf
  | dd |- e <= A           :: :: typ_chk
  | dd |- pe : A :: :: ptyp {{ tex [[dd]] \vdash^\mathit{B} [[pe]] : [[A]] }}
  | CC : ( dd |- A ) ~~> ( dd' |- A' ) :: :: ctx {{ tex [[CC]] : ( [[dd]] \vdash^\mathit{B} [[A]] ) \rightsquigarrow ( [[dd']] \vdash^\mathit{B} [[A']] ) }}
  | A1 <: A2 :: :: sub
  | A1 <~ A2 :: :: csub
  | || A ||               :: :: sizeA {{ tex \llbracket [[A]] \rrbracket }}
  | || e ||e              :: :: sizeE {{ tex \llbracket [[e]] \rrbracket_\mathcal{E} }}
  | || pe ||              :: :: size {{ tex \llbracket [[pe]] \rrbracket }}
  | || pe ||e             :: :: size_e {{ tex \llbracket [[pe]] \rrbracket_\mathcal{E} }}
  | || pe ||s             :: :: size_s {{ tex \llbracket [[pe]] \rrbracket_\mathcal{S} }}
  | || pe ||g             :: :: size_g {{ tex \llbracket [[pe]] \rrbracket_\mathcal{G} }}
  | dd1 | dd2 |- pe1 <<= pe2 :: :: bless {{ tex [[dd1]] \shortmid [[dd2]] \vdash [[pe1]] \sqsubseteq^\mathit{B} [[pe2]] }}
  | aA <~~ evar    :: :: inst
  | evar <~~ aA    :: :: inst2
  | \ pe \   ::  :: type_erasure {{ tex \lfloor [[pe]] \rfloor }}
  | pe ==> pv  ::  :: reduce 
  | pe ==> blame  ::  :: blame
  | e1 = e2       ::  :: expr_eq
  | aA1 <~ aA2 :: :: algo
  | A1 = A2    ::  :: typ_eq
  | DD1 = DD2    ::  :: DD_eq
  | avs1 = avs2 ::  :: avs_eq
  | A `-> B   :: :: cast
  | < A `-> B >   :: :: cast2
  | dd |-G e : A  ::  :: dtyping_without
  | dd |-Gm e : A  ::  :: dtyping_m


subrules
  t <:: A
  gc <:: A
  tc <:: t
  tc <:: t
  aT <:: aA
  at <:: aT
  atc <:: at
  agc <:: aA
  asc <:: agc
  pv <:: pe

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% FOB
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
FOb :: 'FOb_' ::=

defn

A ~ B ::  :: consist :: consist_ by


------- :: refl
A ~ A


------------- :: unknownR
A ~ unknown

------------- :: unknownL
unknown ~ A


A1 ~ C
B ~ D
-------------------- :: arrow
A1 -> B ~ C -> D

</ Ai ~ Ai' // i />
-------------------------------------------------- :: rcd
[ </ li : Ai // i />  ]   ~ [ </ li : Ai' // i /> ]


defn

A <: B ::  :: subtyping :: s_ by

-------------------- :: int
int <: int

-------------------- :: bool
bool <: bool

-------------------- :: float
float <: float

-------------------- :: intfloat
int <: float

C <: A1
B <: D
-------------------- :: arrow
A1 -> B <: C -> D

-------------------- :: unknown
unknown <: unknown

</ Ai <: Ai' // i />
-------------------------------------------------- :: rcd
[ </ li : Ai // i />  ]   <: [ </ li : Ai' // i /> ]


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% DECL CONSISTENCY
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
DConsist :: '' ::=

defn

A ~ B ::  :: dconsist :: dconsist_ by


------- :: refl
A ~ A

------- :: top
top ~ top


------------- :: unknownR
A ~ unknown

------------- :: unknownL
unknown ~ A


------------- :: unknownbR
b@(gc) ~ unknown

------------- :: unknownbL
unknown ~ b@(gc)


A1 ~ C
B ~ D
-------------------- :: arrow
A1 -> B ~ C -> D

A ~ B
------------------ :: forall
\/ a. A ~ \/ a. B

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% DECL WELL FORMEDNESS OF TYPES
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
DWft :: '' ::=

defn

dd |-DK A ::  :: dkwft :: dk_wf_ by

defn

dd |-OL A ::  :: odwft :: ol_wf_ by

--------- :: int
dd |-OL int

a in dd
-------- :: tvar
dd |-OL a

dd |-OL A1
dd |-OL A2
-------------- :: arrow
dd |-OL A1 -> A2

dd, a |-OL A
-------------- :: forall
dd |-OL \/ a. A

defn

dd |-G A ::  :: dwft :: gpc_d_ by

--------- :: int
dd |-G int


--------- :: unknown
dd |-G unknown


-------------- :: static
dd |-G static

-------------- :: gradual
dd |-G gradual


a in dd
-------- :: tvar
dd |-G a

dd |-G A
dd |-G B
-------------- :: arrow
dd |-G A -> B

dd, a |-G A
-------------- :: forall
dd |-G \/ a. A

defn

dd ok :: :: ol_well_formed_tctx :: 'ol_cwf_' {{ tex [[dd]] \ [[ok]] }} by

------------------------- :: empty
empty ok

dd ok
dd |-OL A
------------------------- :: var
dd , x : A ok

dd ok
------------------------- :: tvar
dd , a ok

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% DECL SUBTYPING
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
DSubtyping :: '' ::=

defn

|-HM A <: B ::  :: hm_subtyping :: hm_s_ by

-------------------- :: refl
|-HM t <: t

|-HM A1 [a ~> t] <: A2
----------------- :: forallL
|-HM \/ a. A1 <: A2

a notin fv(A1)
|-HM A1 <: A2
----------------- :: forallR
|-HM A1 <: \/ a . A2


defn

dd |-OL A <: B ::  :: ol_subtyping :: ol_s_ by

a in dd
-------------------- :: tvar
dd |-OL a <: a

-------------------- :: int
dd |-OL int <: int

dd |-OL A3 <: A1
dd |-OL A2 <: A4
---------------------------- :: arrow
dd |-OL A1 -> A2 <: A3 -> A4

dd |-OL t
dd |-OL A [a ~> t] <: A2
----------------- :: forallL
dd |-OL \/ a. A1 <: A2

dd, a |-OL A1 <: A2
----------------- :: forallR
dd |-OL A1 <: \/ a. A2

defn

dd |-DK A <: B ::  :: dk_subtyping :: dk_s_ by

defn

|-AP A <: B ~~> ef ::  :: ap_subtyping :: ap_s_
{{tex [[|-AP]] [[A]] [[<:]] [[B]] \transto{[[~~>]] [[ef]]} }}
by

------------------ :: int
|-AP int <: int ~~> \x:int. x

------------------ :: tvar
|-AP a <: a ~~> \x:a . x

|-AP A3 <: A1 ~~> ef1
|-AP A2 <: A4 ~~> ef2
---------------------------- :: arrow
|-AP A1 -> A2 <: A3 -> A4  ~~> \x:A1->A2. \y:A3. ef2 (x (ef1 y))

|-AP A [a ~> t] <: A2 ~~> ef
----------------- :: forallL
|-AP \/ a. A1 <: A2 ~~> \x:\/a.A1. ef (x t)

a notin fv(A1)
|-AP A1 <: A2 ~~> ef
----------------- :: forallR
|-AP A1 <: \/ a. A2 ~~> \x:A1. /\a. ef x

|-AP A1 <: C ~~> ef1
|-AP B <: D ~~> ef2
----------------------- :: pair
|-AP (A1, B) <: (C, D) ~~> ef3

defn

ss |-AP A <: B ~~> ef ::  :: ap_asubtyping :: ap_as_
{{ tex [[ss]] [[|-AP]] [[A]] [[<:]] [[B]] \transto{[[~~>]] [[ef]]} }}
by

---------------- :: empty
empty |-AP A <: A ~~> \x:A. x


ss, A3 |-AP A1 [a ~> t] <: A2 ~~> ef
------------------------ :: forall
ss, A3 |-AP \/a. A1 <: A2 ~~> \x:\/a.A1. ef (x t)


|-AP A3 <: A1 ~~> ef1
ss |-AP A2 <: A4 ~~> ef2
------------------------ :: arrow
ss, A3 |-AP A1 -> A2 <: A3 -> A4 ~~> \x:A1->A2.\y:A3. ef2 (x (ef1 y))

defn

dd |-G A <: B ::  :: dsubtyping :: gpc_s_ by


dd, a |-G A <: B
----------------- :: forallR
dd |-G A <: \/ a. B


dd |-G t
dd |-G A [a ~> t] <: B
----------------- :: forallL
dd |-G \/ a. A <: B


dd |-G r @ (t)
dd |-G A [r @ (a) ~> r @ (t) ] <: B
------------------------ :: forallLr
dd |-G r @ \/ a. A <: B

dd |-G b @ (t)
dd |-G A [b @ (a) ~> b @ (t) ] <: B
------------------------ :: forallLb
dd |-G b @ \/ a. A <: B


a in dd
-------------------- :: tvar
dd |-G a <: a


r@(a) in dd
-------------------- :: tvarr
dd |-G r@(a) <: r@(a)

b@(a) in dd
-------------------- :: tvarb
dd |-G b@(a) <: b@(a)


-------------------- :: int
dd |-G int <: int


-------------------- :: intr
dd |-G r@(int) <: r@(int)

-------------------- :: intb
dd |-G b@(int) <: b@(int)

dd |-G C <: A1
dd |-G B <: D
---------------------------- :: arrow
dd |-G A1 -> B <: C -> D


--------------------------- :: unknown
dd |-G unknown <: unknown


--------------------------- :: unknownb
dd |-G b@(unknown) <: b@(unknown)

--------------------------- :: spar
dd |-G r@(static) <: r@(static)

--------------------------- :: gparr
dd |-G r@(gradual) <: r@(gradual)

--------------------------- :: gparb
dd |-G b@(gradual) <: b@(gradual)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% DECL CONSISTENT SUBTYPING
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
DConSub :: '' ::=

defn

dd |-G A <~ B ::  :: dconsub :: gpc_cs_ by

---------------- :: top
dd |-G A <~ top

dd, a |-G A1 <~ B
----------------- :: forallR
dd |-G A1 <~ \/ a. B

dd |-G t
dd |-G A1 [a ~> t] <~ B
----------------- :: forallL
dd |-G \/ a. A1 <~ B

dd |-G C <~ A1
dd |-G B <~ D
---------------------------- :: arrow
dd |-G A1 -> B <~ C -> D

a in dd
-------------------- :: tvar
dd |-G a <~ a

-------------------- :: int
dd |-G int <~ int


--------------------------- :: unknownL
dd |-G unknown <~ A

--------------------------- :: unknownR
dd |-G A <~ unknown


--------------------------- :: unknownLL
dd |-G unknown <~ gc

--------------------------- :: unknownRR
dd |-G gc <~ unknown

--------------------------- :: spar
dd |-G static <~ static

--------------------------- :: gpar
dd |-G gradual <~ gradual


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% DECL TYPING
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
DTyping :: '' ::=

defn

dd |-G e : A ~~> pe ::  :: dtyping :: 'gpc_' {{ tex [[dd]] [[|-G]] [[e]] : [[A]] \transto{[[~~>]] [[pe]]} }}
by


(x : A) in dd
--------------------------- :: var
dd |-G x : A ~~> x

--------------------------- :: int
dd |-G n : int ~~> n

dd, a |-G e : A ~~> pe
--------------------------- :: gen
dd |-G e : \/ a. A ~~> /\a. pe

dd, x: A |-G e : B ~~> pe
--------------------------- :: lamann
dd |-G \x: A. e : A -> B ~~> \x:A. pe

dd, x: t |-G e : B ~~> pe
--------------------------- :: lam
dd |-G \x. e : t -> B ~~> \x:t. pe

dd |-G e1 : A ~~> pe1
dd |-G A |> A1 -> A2
dd |-G e2 : A3 ~~> pe2
dd |-G A3 <~ A1
------------------------------- :: app
dd |-G e1 e2 : A2 ~~> (< A `-> A1 -> A2 > pe1) (<A3 `-> A1> pe2)


dd |-G e1 : A ~~> pe1
dd, x : A |-G e2 : B ~~> pe2
--------------------------------------------------- :: let
dd |-G let x = e1 in e2 : B ~~>  (\x : A . pe2) pe1

defn

dd |-HM e : A  ::  :: hmtyping :: 'hm_' by

(x : A) in dd
--------------------------- :: var
dd |-HM x : A

--------------------------- :: int
dd |-HM n : int

</ ai // i /> notin fv(dd)
dd |-HM e : t
--------------------------- :: gen
dd |-HM e : \/ </ ai // i />  . t

dd, x: t1 |-HM e : t2
--------------------------- :: lam
dd |-HM \x. e : t1 -> t2

dd |-HM e1 : t1 -> t2
dd |-HM e2 : t1
------------------------------- :: app
dd |-HM e1 e2 : t2

dd |-HM e1 : A
dd, x : A |-HM e2 : t
------------------------------ :: let
dd |-HM let x = e1 in e2 : t

dd |-HM e : \/ </ ai // i /> . t
--------------------------- :: inst
dd |-HM e : t [ </ ai ~> ti // i /> ]

(x : \/ </ ai // i /> . t) in dd
--------------------------- :: var_inst
dd |-HM x : t [ </ ai ~> ti // i /> ]

dd |-HM e1 : t
</ ai // i /> = fv (t) - fv(dd)
dd, x : \/ </ ai // i/> . t |-HM e2 : t
--------------------------------------- :: let_gen
dd |-HM let x = e1 in e2 : t


defn

dd |-OL e : A  ::  :: ol_dtyping :: 'ol_' by


(x : A) in dd
--------------------------- :: var
dd |-OL x : A

--------------------------- :: int
dd |-OL n : int

dd, a |-OL e : A
--------------------------- :: gen
dd |-OL e : \/ a. A

dd, x: A1 |-OL e : A2
--------------------------- :: lamann
dd |-OL \x: A1. e : A1 -> A2

dd |-OL t
dd, x: t |-OL e : A
--------------------------- :: lam
dd |-OL \x. e : t -> A

dd |-OL e1 : A1 -> A2
dd |-OL e2 : A1
------------------------------- :: app
dd |-OL e1 e2 : A2


dd |-OL e : A1
dd |-OL A1 <: A2
--------------------------- :: sub
dd |-OL e : A2


dd |-OL e1 : A1
dd, x : A1 |-OL e2 : A2
------------------------------ :: let
dd |-OL let x = e1 in e2 : A2

defn

dd |-DK e => A  ::  :: dk_inf :: 'dk_inf_' by

(x : A) in dd
--------------------------- :: var
dd |-DK x => A

--------------------------- :: int
dd |-DK n => int

dd |-DK t1 -> t2
dd, x: t1 |-DK e => t2
--------------------------- :: lam
dd |-DK \x. e => t1 -> t2

dd |-DK e1 => A
dd |-DK A |> A1 -> A2
dd |-DK e2 <= A1
------------------------------- :: app
dd |-DK e1 e2 => A2

dd |-DK e <= A
--------------------------- :: anno
dd |-DK e : A => A

dd |-DK e1 => A
dd |-DK A . e2 =>=> A2
------------------------------- :: app2
dd |-DK e1 e2 => A2

defn

dd |-DK e <= A  ::  :: dk_chk :: 'dk_chk_' by

--------------------------- :: int
dd |-DK n <= int

dd, a |-DK e <= A
--------------------------- :: gen
dd |-DK e <= \/ a. A


dd, x: A1 |-DK e <= A2
--------------------------- :: lam
dd |-DK \x. e <= A1 -> A2


dd |-DK e => A1
dd |-DK A1 <: A2
--------------------------- :: sub
dd |-DK e <= A2


defn

dd |-DK A1 . e =>=> A  ::  :: dk_app :: 'dk_app_'
{{ tex [[dd]] [[|-DK]] [[A1]] \cdot [[e]] [[=>=>]] [[A]] }}
by

dd |-DK e <= A1
--------------------------- :: arr
dd |-DK A1 -> A2 . e =>=> A2

dd |-DK t
dd |-DK A[a ~> t] . e =>=> A1 -> A2
--------------------------- :: forall
dd |-DK \/a. A . e =>=> A1 -> A2

defn

dd ; ss |-AP e => A ~~> es  ::  :: ap_app :: 'ap_app_'
{{ tex [[dd]] ; [[ss]] [[|-AP]] [[e]] [[=>]] [[A]] \transto{[[~~>]] [[es]]} }}
by

dd |-AP e <= A1
ss |-AP A1 <: B
------------------------ :: anno
dd;ss |-AP e : A1 => B ~~> es

(x : A1) in dd
ss |-AP A1 <: A2 ~~> ef
--------------------------- :: var
dd ; ss |-AP x => A2 ~~> ef x

dd, x: A1 |-AP e => A2 ~~> es
--------------------------- :: lam
dd ; ss , A1 |-AP \x. e => A1 -> A2 ~~> \x:A1. es


|-AP A2 <: A1  ~~> ef
dd, x: A1 |-AP e => A3 ~~> es
--------------------------- :: lamann
dd ; ss, A2 |-AP \x: A1. e => A2 -> A3 ~~> \y:A2. (\x:A1. es) (ef y)


dd |-AP e2 => A1 ~~> es2
</ ai // i /> =  fv(A1) - fv(dd)
A2 = \/ </ai//i/> . A1
dd ; ss, A2 |-AP e1 => A2 -> A3 ~~> es1
------------------------------- :: app
dd ; ss |-AP e1 e2 => A3 ~~> es1 (/\ </ai//i/>. es2)


dd |-AP e => (A1, B)
ss |-AP A1 <: C
------------------------ :: fst
dd ; ss |-AP fst e => C ~~> es

dd |-AP e => (A1, B)
ss |-AP B <: C
------------------------ :: snd
dd ; ss |-AP snd e => C ~~> es

ss |-AP \/a.\/b. (a, b) -> a <: A
------------------------ :: fst_var
dd ; ss |-AP fst => A ~~> es

ss |-AP \/a.\/b. (a, b) -> b <: A
------------------------ :: snd_var
dd ; ss |-AP snd => A ~~> es

defn

dd |-gen A1 = A2 ::  :: ap_gen :: 'ap_gen' {{ tex [[dd]]_{gen} ([[A1]]) = [[A2]] }} by

defn

dd |-AP e => A ~~> ef  ::  :: ap_inf :: 'ap_inf_'
{{ tex [[dd]] [[|-AP]] [[e]] [[=>]] [[A]] \transto{[[~~>]] [[ef]]} }}

by

--------------------------- :: int
dd |-AP n => int ~~> n

dd, x: t |-AP e => A ~~> es
--------------------------- :: lam
dd |-AP \x. e => t -> A ~~> \x:t. es

dd , x: A1 |-AP e => A2 ~~> es
--------------------------- :: lamann
dd  |-AP \x: A1. e => A1 -> A2 ~~> \x:A1.es

dd |-AP e1 => A1
dd |-AP e2 => B
--------------------------- :: pair
dd |-AP (e1, e2) => (A1, B) ~~> es

defn

dd |-AP e <= A  ::  :: ap_chk :: 'ap_chk_' by

dd, x : A1 |-AP e <= B
-------------------------- :: lam
dd |-AP \x.e <= A1 -> B


dd |-AP e2 => A1
dd |-AP e1 <= A1 -> B
--------------------- :: app
dd |-AP e1 e2 <= B

defn

dd |-F es : A         ::  :: f_     :: 'f_' by

(x : A) in dd
--------------------------- :: var
dd |-F x : A

--------------------------- :: int
dd |-F n : int

dd, x: A1 |-F es : A2
--------------------------- :: lamann
dd |-F \x: A1. es : A1 -> A2

dd |-F es1 : A1 -> A2
dd |-F es2 : A1
------------------------------- :: app
dd |-F es1 es2 : A2

dd |-F es : A
a notin fv(dd)
------------------------------- :: tabs
dd |-F /\a. es : \/a. A


dd |-F es : \/a. A1
------------------------------- :: tapp
dd |-F es A2 : A1 [a~>A2]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Eta ID Equality
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
DEq :: '' ::=

defn

ef1 =nid ef2   ::  :: etaid :: eta_ by

x notin fv(ef)
------------------ :: reduce
\x. ef x =nid ef

-------------------- :: id
(\x. x) ef =nid ef

ef1 =nid ef1'
ef2 =nid ef2'
--------------------------- :: app
ef1 ef2 =nid ef1' ef2'

ef =nid ef'
------------------- :: lam
\x. ef =nid \x. ef'

-------------------- :: refl
ef =nid ef

ef =nid ef'
-------------------- :: symm
ef' =nid ef

ef1 =nid ef2
ef2 =nid ef3
-------------------- :: trans
ef1 =nid ef3

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% DECL MATCHING
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


defns
DMatching :: '' ::=

defn

dd |-DK A |> B ::  :: dk_matching :: dk_m_ by


dd |-DK t
dd |-DK A [a ~> t] |> A1 -> A2
-------------------------------- :: forall
dd |-DK \/ a . A |> A1 -> A2


-------------------------- :: arr
dd |-DK A1 -> A2 |> A1 -> A2

defn

dd |-G A |> B ::  :: dmatching :: gpc_m_ by


dd |-G t
dd |-G A [a ~> t] |> A1 -> A2
-------------------------------- :: forall
dd |-G \/ a . A |> A1 -> A2


-------------------------- :: arr
dd |-G A1 -> A2 |> A1 -> A2


-------------------------------------- :: unknown
dd |-G unknown |> unknown -> unknown



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% WELL FORMEDNESS OF ALGO CONTEXTS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
Wfc :: 'gpc_' ::=

defn

|-G GG ::  :: wfc :: wf_ by




----------------------- :: empty
|-G empty


|-G GG
x notin fv(GG)
GG |-G aA
----------------- :: var
|-G GG , x : aA



|-G GG
a notin fv(GG)
----------------- :: tvar
|-G GG , a


|-G GG
evar notin fv(GG)
----------------- :: evar
|-G GG , evar


|-G GG
evar notin fv(GG)
GG |-G at
----------------- :: solved
|-G GG , evar = at

|-G GG
mevar notin fv(GG)
----------------- :: marker
|-G GG , mevar



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% ALGO WELL FORMEDNESS OF TYPES
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
AWft :: 'gpc_' ::=

defn

GG |-G aA ::  :: awft :: ad_ by

--------- :: int
GG |-G int


--------- :: unknown
GG |-G unknown


--------- :: static
GG |-G static


--------- :: gradual
GG |-G gradual


-------- :: tvar
GG[a] |-G a


------------------ :: evar
GG[evar] |-G evar


------------------ :: solved
GG[evar = at] |-G evar


GG |-G aA1
GG |-G aA2
-------------- :: arrow
GG |-G aA1 -> aA2

GG, a |-G aA
-------------- :: forall
GG |-G \/ a. aA



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% ALGO CONSISTENT SUBTYPING
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
AConSub :: 'gpc_' ::=

defn

GG |-G aA1 <~ aA2 -| DD ::  :: aconsub :: as_
by


-------------------------- :: tvar
GG[a] |-G a <~ a -| GG[a]



-------------------------- :: evar
GG[evar] |-G evar <~ evar -| GG[evar]


-------------------- :: int
GG |-G int <~ int -| GG


GG |-G aA3 <~ aA1 -| TT
TT |-G [TT] aA2 <~ [TT] aA4 -| DD
----------------------------------------- :: arrow
GG |-G aA1 -> aA2 <~ aA3 -> aA4 -| DD


GG, a |-G aA1 <~ aA2 -| DD, a, TT
----------------------------- :: forallR
GG |-G aA1 <~ \/ a. aA2 -| DD


GG, mevar, evar |-G aA1 [a ~> evar] <~ aA2 -| DD, mevar, TT
------------------------------ :: forallL
GG |-G \/ a. aA1 <~ aA2 -| DD


GG, msa, sa |-G aA1 [a ~> sa] <~ aA2 -| DD, msa, TT
------------------------------ :: forallLL
GG |-G \/ a. aA1 <~ aA2 -| DD


--------------------------- :: spar
GG |-G static <~ static -| GG

--------------------------- :: gpar
GG |-G gradual <~ gradual -| GG


--------------------------- :: unknownL
GG |-G unknown <~ aA -| GG

--------------------------- :: unknownR
GG |-G aA <~ unknown -| GG


--------------------------- :: unknownLL
GG |-G unknown <~ agc -| [agc] GG

--------------------------- :: unknownRR
GG |-G agc <~ unknown -| [agc] GG


evar notin fv(aA)
GG[evar] |-G evar <~~ aA -| DD
---------------------------------- :: instL
GG[evar] |-G  evar <~ aA -| DD



evar notin fv(aA)
GG[evar] |-G aA <~~ evar -| DD
---------------------------------- :: instR
GG[evar] |-G  aA <~ evar -| DD


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% INSTANTIATION
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


defns
AInst :: 'gpc_' ::=

defn

GG |-G evar <~~ aA -| DD :: :: instl :: instl_
by



GG |-G at
--------------------------------------------- :: solve
GG, evar, GG' |-G evar <~~ at -| GG, evar = at, GG'


--------------------------------------------- :: solveU
GG[evar] |-G evar <~~ unknown -| GG[evar]



GG |-G at
--------------------------------------------- :: solveS
GG, sa, GG' |-G sa <~~ at -| GG, sa = at, GG'


GG |-G atc
--------------------------------------------- :: solveG
GG, ga, GG' |-G ga <~~ atc -| GG, ga = atc, GG'



--------------------------------------------- :: solveUS
GG[sa] |-G sa <~~ unknown -| GG[ga, sa = ga]


--------------------------------------------- :: solveUG
GG[ga] |-G ga <~~ unknown -| GG[ga]


------------------------------------------------------------- :: reach
GG[evar][evarb] |-G evar <~~ evarb -| GG[evar][evarb = evar]


------------------------------------------------------------- :: reachSG1
GG[sa][gb] |-G sa <~~ gb -| GG[ga , sa = ga][gb = ga]


------------------------------------------------------------- :: reachSG2
GG[sb][ga] |-G ga <~~ sb -| GG[gb , sb = gb][ga = gb]


------------------------------------------------------------- :: reachOther
GG[evar][evarb] |-G evar <~~ evarb -| GG[evar][evarb = evar]




GG[evar2, evar1, evar = evar1 -> evar2] |-G aA1 <~~ evar1 -| TT
TT |-G evar2 <~~ [TT]aA2 -| DD
----------------------------------------------------------------- :: arr
GG[evar] |-G evar <~~ aA1 -> aA2 -| DD




GG[evar] , b |-G evar <~~ aA -| DD , b , TT
--------------------------------------- :: forallR
GG[evar] |-G evar <~~ \/b . aA -| DD




defn
GG |-G aA <~~ evar -| DD :: :: instr :: instr_
by

GG |-G at
--------------------------------------------- :: solve
GG, evar, GG' |-G at <~~ evar -| GG, evar = at, GG'


--------------------------------------------- :: solveU
GG[evar] |-G unknown <~~ evar -| GG[evar]

GG |-G at
--------------------------------------------- :: solveS
GG, sa, GG' |-G at <~~ sa -| GG, sa = at, GG'


GG |-G atc
--------------------------------------------- :: solveG
GG, ga, GG' |-G atc <~~ ga -| GG, ga = atc, GG'



--------------------------------------------- :: solveUS
GG[sa] |-G unknown  <~~ sa  -| GG[ga, sa = ga]


--------------------------------------------- :: solveUG
GG[ga] |-G unknown  <~~ ga  -| GG[ga]



------------------------------------------------------------- :: reach
GG[evar][evarb] |-G evarb <~~ evar -| GG[evar][evarb = evar]


------------------------------------------------------------- :: reachSG1
GG[sa][gb] |-G gb <~~ sa -| GG[ga , sa = ga][gb = ga]


------------------------------------------------------------- :: reachSG2
GG[sb][ga] |-G sb <~~ ga -| GG[gb , sb = gb][ga = gb]


------------------------------------------------------------- :: reachOther
GG[evar][evarb] |-G evarb <~~ evar -| GG[evar][evarb = evar]




GG[evar2, evar1, evar = evar1 -> evar2] |-G evar1 <~~ aA1 -| TT
TT |-G [TT]aA2 <~~ evar2  -| DD
----------------------------------------------------------------- :: arr
GG[evar] |-G aA1 -> aA2  <~~ evar -| DD


GG[evar] , mevarb, evarb |-G aA[b ~> evarb] <~~ evar -| DD, mevarb, TT
-------------------------------------------------- :: forallL
GG[evar] |-G \/b . aA <~~ evar -| DD


GG[evar] , msb, sb |-G aA[b ~> sb] <~~ evar -| DD, msb, TT
-------------------------------------------------- :: forallLL
GG[evar] |-G \/b . aA <~~ evar -| DD



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% ALGO TYPING
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
ATyping :: 'gpc_' ::=

defn

GG |-G ae => aA -| DD ::  :: inf :: 'inf_'
by

(x : aA) in GG
--------------------------- :: var
GG |-G x => aA -| GG



--------------------------- :: int
GG |-G n => int -| GG


GG |-G aA
GG, evarb,  x: aA |-G ae <= evarb -| DD, x : aA, TT
------------------------------------------- :: lamann
GG |-G \x: aA. ae => aA -> evarb -| DD


GG |-G aA
GG, sb,  x: aA |-G ae <= sb -| DD, x : aA, TT
------------------------------------------- :: lamann2
GG |-G \x: aA. ae => aA -> sb -| DD


GG, evar, evarb, x : evar |-G ae <= evarb -| DD, x : evar, TT
------------------------------------ :: lam
GG |-G \x. ae => evar -> evarb  -| DD


GG, sa, sb, x : sa |-G ae <= sb -| DD, x : sa, TT
------------------------------------ :: lam2
GG |-G \x. ae => sa -> sb  -| DD


GG |-G ae1 => aA -| TT1
TT1 |-G [TT1] aA |> aA1 -> aA2 -| TT2
TT2 |-G ae2 <= [TT2]aA1 -| DD
------------------------------- :: app
GG |-G ae1 ae2 => aA2  -| DD



GG |-G aA
GG |-G ae <= aA -| DD
---------------------- :: anno
GG |-G ae : aA => aA -| DD


GG |-G ae1 => aA -| TT1
TT1, evar, x : aA |-G ae2 <= evar -| DD, x : aA, TT2
------------------------------------------------ :: let
GG |-G let x = ae1 in ae2 => evar -| DD


GG |-G ae1 => aA -| TT1
TT1, sa, x : aA |-G ae2 <= sa -| DD, x : aA, TT2
------------------------------------------------ :: let2
GG |-G let x = ae1 in ae2 => sa -| DD

defn

GG |-G ae <= aA -| DD ::  :: chk :: 'chk_'
by


GG, a |-G ae <= aA -| DD , a , TT
--------------------------- :: gen
GG |-G ae <= \/ a. aA -| DD



GG, x : aA1 |-G ae <= aA2 -| DD, x : aA1, TT
------------------------------------ :: lam
GG |-G \x. ae <= aA1 -> aA2  -| DD


GG |-G ae => aA1 -| TT
TT |-G [TT]aA1 <~ [TT]aA2 -| DD
------------------------------------ :: sub
GG |-G ae <= aA2 -| DD


GG |-G ae1 => aA -| TT
TT, x : aA |-G ae2 <= aB -| DD, x : aA, TT'
------------------------------------------------ :: let
GG |-G let x = ae1 in ae2 <= aB -| DD



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% ALGO MATCHING
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


defns
AMatching :: 'gpc_' ::=

defn

GG |-G aA |> aA1 -> aA2 -| DD ::  :: amatching :: am_
by



GG , evar |-G aA[a ~> evar] |> aA1 -> aA2 -| DD
-------------------------------------------- :: forall
GG |-G \/a. aA |> aA1 -> aA2 -| DD


GG , sa |-G aA[a ~> sa] |> aA1 -> aA2 -| DD
-------------------------------------------- :: forallL
GG |-G \/a. aA |> aA1 -> aA2 -| DD


------------------------------------------ :: arr
GG |-G  aA1 -> aA2 |> aA1 -> aA2 -| GG


------------------------------------------ :: unknown
GG |-G  unknown |> unknown -> unknown -| GG


---------------------------------------------------------------------------------- :: var
GG[evar] |-G  evar |> evar1 -> evar2 -| GG[evar1 , evar2 , evar = evar1 -> evar2]


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% CONTEXT EXTENSION
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
Extension :: 'gpc_' ::=


defn

GG --> DD :: :: cext :: 'ext_' by



--------------- :: id
empty --> empty



GG --> DD
[DD] aA = [DD] aA'
-------------------------------- :: var
GG , x : aA --> DD , x : aA'


GG --> DD
-------------------- :: tvar
GG , a  -->  DD , a


GG --> DD
------------------------- :: evar
GG , evar --> DD , evar


GG --> DD
[DD] at = [DD] at'
------------------------------------- :: solved
GG , evar = at --> DD , evar = at'


GG --> DD
------------------------------------- :: solve
GG , evar  --> DD , evar = at


GG --> DD
------------------------------------- :: solveS
GG , sa  --> DD , sa = at


GG --> DD
------------------------------------- :: solveG
GG , ga --> DD , ga = atc


GG --> DD
------------------------------------- :: add
GG  --> DD , evar


GG --> DD
------------------------------------- :: marker
GG, mevar  --> DD , mevar



GG --> DD
------------------------------------- :: addSolve
GG  --> DD , evar = at



GG --> DD
------------------------------------- :: addSolveS
GG  --> DD , sa = at


GG --> DD
------------------------------------- :: addSolveG
GG  --> DD , ga = atc

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% LESS PRECISE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
Lessp :: '' ::=

defn

A <<= B :: :: type :: 'gpc_l_' by

----------------- :: unknown
unknown <<= A


----------------- :: int
int <<= int

A1 <<= A3
A2 <<= A4
----------------- :: arrow
A1 -> A2 <<= A3 -> A4

----------------- :: tvar
a <<= a

A1 <<= A2
----------------- :: forall
\/a. A1 <<= \/a. A2

defn

e1 <<= e2 :: :: expr :: 'gpc_le_' by


--------------- :: refl
e <<= e

A1 <<= A2
e1 <<= e2
--------------- :: lamann
\x:A1. e1 <<= \x:A2.e2

e1 <<= e3
e2 <<= e4
--------------- :: app
e1 e2 <<= e3 e4

defn

pe1 <<= pe2 :: :: pbc :: 'b_le_' by


--------------- :: var
x <<= x

--------------- :: nat
n <<= n

A1 <<= A2
pe1 <<= pe2
--------------- :: lamann
\x:A1. pe1 <<= \x:A2. pe2

pe1 <<= pe2
--------------- :: tabs
/\a. pe1 <<= /\a. pe2

pe1 <<= pe3
pe2 <<= pe4
--------------- :: app
pe1 pe2 <<= pe3 pe4

A1 <<= A3
A2 <<= A4
pe1 <<= pe2
--------------- :: cast
<A1 `-> A2> pe1 <<= <A3 `-> A4> pe2

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Promotion
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns

promotion :: '' ::=

defn

DD |-pr ( evar ) at1 ~~> at2 -| TT ::  :: promotion :: 'pr_'
{{ tex [[DD]] [[|-pr]]_{[[evar]]} [[at1]] [[~~>]] [[at2]] [[-|]] [[TT]] }}
by

-------------------------- :: int
GG |-pr (evar) int ~~> int -| GG

-------------------------- :: tvar
GG[a][evar] |-pr (evar) a ~~> a -| GG[a][evar]

GG |-pr (evar) at1 ~~> at3 -| TT
TT |-pr (evar) [TT]at2 ~~> at4 -| DD
-------------------------- :: arrow
GG |-pr (evar) at1 -> at2 ~~> at3 -> at4 -| DD

-------------------------- :: evarL
GG[evarb][evar] |-pr (evar) evarb ~~> evarb -| GG[evarb][evar]

-------------------------- :: evarR
GG[evar][evarb] |-pr (evar) evarb ~~> evarb1 -| GG[evarb1,evar][evarb]

defn

GG |-pr pm ( evar ) aA ~~> at -| DD ::  :: sprpromotion :: 'p_pr_'
{{ tex [[GG]] \vdash^{\!\![[pm]]}_{[[evar]]} [[aA]] [[~~>]] [[at]] [[-|]] [[DD]] }}
by

GG[evarb,evar] |-pr+ (evar) aA[a ~> evarb] ~~> at -| DD
-------------------------- :: forallL
GG[evar] |-pr+ (evar) \/a. aA ~~> at -| DD

a notin fv ( aA )
GG |-pr- (evar) aA ~~> at -| DD
-------------------------- :: forallR
GG |-pr- (evar) \/a. aA ~~> at -| DD

GG |-pr (evar) at1 ~~> at2 -| DD
-------------------------- :: mono
GG |-pr pm (evar) at1 ~~> at2 -| DD

GG  |-pr -pm (evar) aA1 ~~> at1 -| TT
TT |-pr  pm (evar) [TT] aA2  ~~> at2 -| DD
-------------------------- :: arrow
GG |-pr pm (evar) aA1 -> aA2 ~~> at1 -> at2 -| DD

defn

GG |-u at1 ~= at2 -| DD ::  :: unification :: 'u_'
{{ tex [[GG]] [[|-u]] [[at1]] [[~=]] [[at2]] [[-|]] [[DD]] }}
by

------------------ :: refl
GG |-u at ~= at -| GG


GG |-u at1 ~= at3 -| TT
TT |-u [TT]at2 ~= [TT]at4 -| DD
------------------ :: arrow
GG |-u at1 -> at2 ~= at3 -> at4 -| DD

GG |-pr (evar) at1 ~~> at2 -| DD[evar]
------------------ :: evarL
GG |-u evar ~= at1 -| DD[evar=at2]

GG |-pr (evar) at1 ~~> at2 -| DD[evar]
------------------ :: evarR
GG |-u at1 ~= evar -| DD[evar=at2]

defn

GG |-sub aA1 <~ aA2 -| DD ::  :: subtyping :: 's_'
{{ tex [[GG]] [[|-sub]] [[aA1]] [[<~]] [[aA2]] [[-|]] [[DD]] }}
by


-------------------------- :: tvar
GG[a] |-sub a <~ a -| GG[a]



-------------------------- :: evar
GG[evar] |-sub evar <~ evar -| GG[evar]


-------------------- :: int
GG |-sub int <~ int -| GG


GG |-sub aA3 <~ aA1 -| TT
TT |-sub [TT] aA2 <~ [TT] aA4 -| DD
----------------------------------------- :: arrow
GG |-sub aA1 -> aA2 <~ aA3 -> aA4 -| DD


GG, a |-sub aA1 <~ aA2 -| DD, a, TT
----------------------------- :: forallR
GG |-sub aA1 <~ \/ a. aA2 -| DD


GG, mevar, evar |-sub aA1 [a ~> evar] <~ aA2 -| DD, mevar, TT
------------------------------ :: forallL
GG |-sub \/ a. aA1 <~ aA2 -| DD

GG[evar] |-pr - (evar) aA ~~> at -| DD[evar]
---------------------------------- :: instL
GG[evar] |-sub  evar <~ aA -| DD[evar=at]

GG[evar] |-pr + (evar) aA ~~> at -| DD[evar]
---------------------------------- :: instR
GG[evar] |-sub  aA <~ evar -| DD[evar=at]