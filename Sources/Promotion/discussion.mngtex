\section{Discussion}
\label{sec:pr:discussion}

This section discusses two extensions of promotion, and we can see that
promotion scales naturally to other type features. The first extension explores
dependent types, while the second extension considers gradual types.

\subsection{Promoting Dependent Types}

In \Cref{sec:pr:background} we mentioned the drawback of decomposing type
constructs that it cannot be easily applied to more advanced types like
dependent types. In this section, we discuss how we can apply promotion to
dependent types.

Consider \rref{pr-pi} given below that promotes a dependent type
$[[Pi a:at1.at2]]$.
%
\begin{mathpar}
  \inferrule*[lab=pr-pi]{
    [[ GG |-pr (evar) at1 ~~> at3 -| TT  ]]
    \quad
    [[ TT, a |-pr (evar) [TT]at2 ~~> at4 -| DD, a ]]
  }{
    [[GG |-pr (evar) Pi a : at1. at2 -> int ~~> Pi a : at3. at4 -| DD ]]
  }
\end{mathpar}

\noindent
Here we first promote $[[at1]]$, returning $[[at3]]$. Then we add $[[a]]$ into
the context to promote $[[at2]]$. Finally, we return $[[Pi a:at3. at4]]$ and
discard $[[a]]$ in the output context.

Unfortunately, this design does not work. In particular, consider promoting
$[[Pi a: evarb. a]]$.
%
\begin{mathpar}
  \inferrule*[right=\rref*{pr-pi}]{
    \inferrule*[lab=\rref*{pr-evarL}]{ }{
    [[ evarb, evara |-pr (evar) evarb ~~> evarb -| evarb, evara  ]]}
    \quad
    \inferrule*[lab=\rref*{pr-evarL}]{ }{
    [[ evarb, evara, a]] [[|-pr]]_{[[evar]]} [[a]] [[~~>]] ???}
  }{
    [[evarb, evara]] [[|-pr]]_{[[evar]]} [[Pi a : evarb. a -> int]] [[~~>]]
  }
\end{mathpar}

\noindent
We expect that the promotion would return $[[Pi a:evarb. a]]$. However, after we
add $[[a]]$ into the context to promote $[[a]]$, \rref{pr-tvar} does not apply,
as $[[a]]$ is out of the scope of $[[evar]]$!

The issue can be fixed by changing \rref{pr-tvar} to \rref{pr-tvarr} to not
consider the order of type variables.
%
\begin{mathpar}
  \drule{pr-tvarr}
\end{mathpar}

Then, while promotion resolves the ordering of unification variables, since
there is no constraint for type variables, it is not guaranteed anymore that the
promoted type is well-formed in the prefix context of $[[evar]]$. Therefore, we
need to adjust the rule of subtyping to check explicitly that the result is
well-formed, i.e.,
%
\begin{mathpar}
  \drule{s-instLL}\\
  \drule{s-instRR}
\end{mathpar}

\cite{tfp} include a more detailed discussion and formalization of applying
promotion to a dependently typed lambda calculus.


\subsection{Promoting Gradual Types}

We have shown that polymorphic promotion works for DK. A natural extension is to
also apply polymorphic promotion to \gpc (\Cref{chap:Gradual}). Then the key is
to show how to promote the unknown type. Since comparing with the unknown type
does not impose any constraints, we can simply replace it with a fresh
unification variable:
%
\begin{mathpar}
\drule{p-pr-unknown}
\end{mathpar}

\noindent
For example, we have $[[evar |-pr (evar) int -> unknown ~~> int -> evarb -|
evarb, evar]]$.

For the extended \gpc which restores the dynamic guarantee
(\Cref{chap:Dynamic}), we can replace the unknown type with a fresh gradual
unification variables instead.
%
\begin{mathpar}
\drule{p-pr-unknownG}
\end{mathpar}

With these rules it would be possible to apply polymorphic promotion to \gpc.
Note this discussion is a sketch and we have not fully worked out the full
algorithm yet.

\section{Promotion in Action}

The promotion operation is actually present in the \textit{Glasgow Haskell
  Compiler} (GHC), the state-of-the-art compiler for the Haskell programming
language, though its form is different than what we have presented.

In particular, instead of keeping all the unification variables ordered in the
context, GHC only keeps them in order with respect to type variables in the
context, by assigning a \textit{level number} to each unification variable and
each type variable, and incrementing the level number whenever a new type
variable is brought into scope. When unifying $[[evar]] [[~=]] [[t]]$ where
$[[evar]]$ is level $N$, GHC ensures that all free variables in $[[t]]$ are from
level $N$ or lower. If there is a unification variable $[[evarb]]$ in $[[t2]]$,
where $[[evarb]]$ has level $M > N$, then it allocates $[[evarb1]]$ at level $N$
and set $[[evarb]] = [[evarb1]]$, which essentially implements the idea of promotion.




%%% Local Variables:
%%% mode: latex
%%% TeX-master: "../../Thesis"
%%% org-ref-default-bibliography: "../../Thesis.bib"
%%% End: