\section{Unification for the Simply Typed Lambda Calculus}
\label{sec:pr:unif}

This section first introduces the simply typed lambda calculus (STLC), and then
presents a unification algorithm that uses the novel promotion mechanism. As we
have mentioned before, using promotion for unification is overkill for STLC. So
the purpose of this section is to illustrate the key idea of promotion in the
context of STLC, which sets us the stage for later advanced applications.

\subsection{Declarative System}

The declarative specification of STLC is given in \Cref{fig:stlc}.

Expressions $[[e]]$ include variables $[[x]]$, integers $[[n]]$, annotated
lambda abstractions $[[\x : t . e]]$, un-annotated lambda abstractions $[[\x .
e]]$, and applications $[[e1 e2]]$. We have only monotypes $[[t]]$, which
includes the integer type $[[int]]$ and function types $[[at1 -> at2]]$.
Contexts $[[dd]]$ keep track of the types of the variables.

The typing rules are standard. For unannotated lambdas (\rref{t-lamann}), the
system guesses a monotype $[[t]]$.

\begin{figure}
  \begin{center}
  \begin{tabular}{lrcl} \toprule
    Expressions &  $[[e]]$   & $\Coloneqq$ & $[[x]]  \mid [[n]]  \mid [[\x : t . e]] \mid [[ \x . e ]] \mid [[e1 e2]] $ \\
    Monotypes & $[[t]]$ & \syndef & $ [[int]] \mid [[t1 -> t2]] $ \\
    Contexts    & $[[dd]]$ & $\Coloneqq$ & $[[empty]]  \mid [[dd , x : t]] $ \\ \bottomrule
  \end{tabular}
  \end{center}

  \drules[t]{$ [[dd |- e : t]] $}{Typing}{var,int,lamann,lam,app}
  \caption{Syntax and declarative typing of the simply typed lambda calculus.}
  \label{fig:stlc}
\end{figure}


\subsection{Algorithmic System}


\begin{figure}
  \centering
  \begin{tabular}{lrcl} \toprule
    Expressions &  $[[e]]$   & $\Coloneqq$ & $[[x]]  \mid [[n]]  \mid [[\x : at . ae]] \mid [[ \x . e ]] \mid [[e1 e2]] $ \\
    Monotypes & $[[at]]$ & \syndef & $ [[int]] \mid [[at1 -> at2]] \mid \hlmath{[[evar]]} $ \\
    Algorithmic Contexts & $[[GG]], [[DD]], [[TT]]$ & \syndef & $[[empty]] \mid [[GG , evar]] \mid [[GG, evar = at]]  $ \\
    Complete Contexts & $[[OO]]$ & \syndef & $[[empty]] \mid [[OO, evar = at]]  $ \\ \bottomrule
  \end{tabular}
  \drules[wf]{$ [[GG |-wf at]] $}{Well-formedness}{int, arrow, evar}
  \drules[wfc]{$ [[GG ok]] $}{Well-formedness of algorithmic contexts}{empty,evar,evarSolved}
  \caption{Syntax of algorithmic STLC}
  \label{fig:pr:algo:syntax}
\end{figure}

\begin{figure}
  \drules[at]{$ [[GG |- ae : at -| DD]] $}{Algorithmic typing}{var, int, lamann, lam, app}
  \drules[u]{$ [[GG |-u at1 ~= at2 -| DD]] $}{Unification}{refl, arrow, evarL, evarR}
  \drules[pr]{$ [[GG |-pr (evar) at1 ~~> at2 -| DD]] $}{Promotion}{int, arrow, evarL, evarR}
  \caption{Algorithmic typing, promotion and unification of algorithmic STLC}
  \label{fig:pr:algo}
\end{figure}

The syntax of the algorithmic system is given in \Cref{fig:pr:algo:syntax}. Following
DK \citep{DK}, algorithmic monotypes include unification type variables
$[[evar]]$. Algorithmic contexts also contain declarations of unification type
variables, either unsolved ($[[evar]]$) or solved ($[[evar=at]]$). Complete
contexts $[[OO]]$ contain only solved variables. We use the judgment $[[GG |-wf
at]]$ to indicate that all unification variables in $[[at]]$ are well-scoped,
and $[[GG ok]]$ to indicate well-formed contexts, where each binding is
well-formed in its prefix context.

Following \cite{DK}, we use contexts as substitutions on types. We write $[[
[GG]at ]]$ to mean $[[GG]]$ applied as a substitution to type $[[at]]$, whose
definition is given below.

\begin{center}
  \begin{tabular}{lll} \toprule
    $[[ [GG] int  ]]$     & = & $[[ int ]]$ \\
    $[[ [GG[evar] ] evar  ]]$     & = & $[[ evar ]]$ \\
    $[[ [GG[evar=at] ] evar  ]]$     & = & $[[ [GG[evar=at] ]at ]]$ \\
    $[[ [GG] at1 -> at2  ]]$ & = & $[[ [GG] at1 -> [GG] at2 ]]$ \\
    \bottomrule
  \end{tabular}
\end{center}


\paragraph{Algorithmic typing.}

\Cref{fig:pr:algo} defines algorithmic typing. The judgment $[[GG |- ae : at -|
DD]]$ reads that under the input context $[[GG]]$, the expression $[[ae]]$ has
type $[[at]]$, with the output context $[[DD]]$. Most rules are standard. In
\rref{at-lamann}, instead of guessing a type as in its declarative counterpart,
the rule generates a fresh unification variable $[[evar]]$ as the type of
$[[x]]$, and another fresh unification variable $[[evarb]]$ as the type of the
body, and continues type-checking the body. After getting the type $[[at]]$ of
the body, we unify $[[evarb]]$ with $[[ [TT1]at ]]$, and return the result type
$[[evar -> evarb]]$, where the trailing context $[[TT]]$ is discarded.

Here are several notable things about \rref{at-lamann}. First, we do not
directly return $[[evar -> at]]$ as the result type, as otherwise we cannot
discard the type context $[[TT]]$ after $[[x]]$, since the type $[[at]]$ may
refer to unification variables in $[[TT]]$. As such, we unify $ [[evarb]] [[~=]]
[[ [TT1]at ]]$, and return $[[evara -> evarb]]$ as the result type instead,
which ensures that the result type is well-formed under the context $[[DD]]$, so
that we can safely remove $[[TT]]$. Discarding $[[TT]]$ is mainly an
optimization step. Second, we do not simply unify $[[evarb]] [[~=]] [[at]]$, but
$[[evarb]] [[~=]] [[ [TT1]at ]]$, where the context $[[TT1]]$ is applied to
$[[at]]$ (we do not apply $[[TT1]]$ to $[[evarb]]$ as given $[[evarb]]$ is a
fresh unification not referred anywhere yet, we know $[[ [TT1]evarb ]] =
[[evarb]]$). This maintains an invariant: in the unification problem $[[ GG |-u
at1 ~= at2 -| DD ]]$, the types $[[at1]]$ and $[[at2]]$ are fully applied under
$[[GG]]$. This invariant simplifies the unification process: we know that every
unification variable we encounter during unification is unsolved and we do not
need to discuss the case when it is solved where we need to replace it with its
solution.

In \rref{at-app}, we first infers the type of the function $[[at1]]$, and the type
of the argument $[[at2]]$. As we know that $[[at1]]$ must be an arrow type,
we create a fresh unification variable $[[evar]]$ as the result type of the
application, and unify $[[ [TT2]at1]] [[~=]] [[ [TT2]at2 -> evar ]]$. Again
notice we apply the context to the types before we unify them.


\paragraph{Unification.}

The judgment $[[GG |-u at1 ~= at2 -| DD]]$ reads that under the input context
$[[GG]]$, unifying $[[at1]]$ with $[[at2]]$ results in the output context
$[[DD]]$. \Rref{u-refl} is our base case, and \rref{u-arrow} unifies the
components of the arrow types. When unifying $[[evar]] [[~=]] [[at1]]$
(\rref{u-evarL}), we cannot simply set $[[evar]]$ to $[[at1]]$, as $[[at1]]$
might include variables bound to the right of $[[evar]]$. Instead, we need to
\textit{promote} ($[[|-pr]]$) $[[at1]]$. After promoting $[[at1]]$ to $[[at2]]$,
we can directly set $[[evar = at2]]$. \Rref{u-evarR} is symmetric to
\rref{u-evarL}. Note that when unifying $[[Xa ~= Xb]]$, either \rref{u-evarL}
and \rref{u-evarR} could be tried; an implementation can arbitrarily choose
between them.

\paragraph{Promotion.}

The promotion relation $ [[GG |-pr (evar) at1 ~~> at2 -| DD]] $ given at the
bottom of \Cref{fig:pr:algo} reads that under the input context $[[DD]]$,
promoting type $[[at1]]$ yields type $[[at2]]$, so that $[[at2]]$ is well-formed
in the prefix context of $[[evar]]$, while retaining $[[ [DD]at1 = [DD] at2 ]]$.
At a high-level, $[[|-pr]]$ looks for free variables in $[[at1]]$. Integers are
always well-formed (\rref{pr-int}). Promoting a function recursively promotes
its components (\rref{pr-arrow}). Variables bound to the left of $[[evar]]$ in
$[[GG]]$ are unaffected (\rref{pr-evarL}), as they are already well-formed. In
\rref{pr-evarR}, a unification variable $[[evarb]]$ bound to the right of
$[[evar]]$ in $[[GG]]$ is replaced by a fresh variable introduced to
$[[evar]]$'s left. Promotion is a partial operation, as it requires $[[evarb]]$
either to be to the right or to the left of $[[evar]]$. There is yet another
possibility: if $[[evarb = evar]]$, then no rule applies. This is a desired
property, as the $[[evarb = evar]]$ case exactly corresponds to the
``occurs-check'' in a more typical presentation of unification. By preventing
promoting $[[evar]]$ to the left of $[[evar]]$, we prevent the possibility of an
infinite substitution when applying an algorithmic context. Note that
\rref{u-refl} solves the unification case $[[evar]] [[~=]] [[evar]]$.

\paragraph{Example.}

Below we give the derivation of $[[evar, evarb]] [[|-u]] [[evar]] [[~=]] [[evarb
-> int ]]$ discussed in \Cref{sec:pr:background}.
%
\begin{mathpar}
  \footnotesize
  \inferrule*[right=\rref*{u-eval-r}]{
    \inferrule*[right=\rref*{pr-arrow}]{
      \inferrule*[lab=\rref*{pr-evarR}]{  }{[[ evar, evarb |-pr (evar) evarb ~~> evar -| evar1, evar, evarb = evar1 ]]}
      \quad
      \inferrule*[lab=\rref*{pr-int}]{  }{[[ evar1, evar, evarb = evar1 |-pr (evar) int ~~> int -| evar1, evar, evarb = evar1 ]]}
    }
    {[[evar, evarb |-pr (evar) evarb -> int ~~> evar1 -> int -| evar1, evar, evarb = evar1 ]]}%
  }{
    [[evar, evarb |-u evar ~= evarb -> int -| evar1, evar = evar1 -> int, evarb =evar1  ]]
  }
\end{mathpar}


\subsection{Soundness and Completeness}

\begin{figure}
  \drules[ext]{$ [[GG --> DD]] $}{Context Extension}{id,var,evar,solved,solve,add,addSolve}
\end{figure}

We prove that our type promotion strategy and the unification algorithm are
sound. First, we show that except for resolving the order problem, promotion
will not change the type. Namely, the input type and the output type are
equivalent after substitution by the output context. Moreover, the promoted type
is well-formed under the prefix context of $[[evar]]$.

\begin{restatable}[Soundness of Promotion]{theorem}{prsound} \label{thm:pr_soundness}%
  If $[[  GG |-pr (evar) at1 ~~> at2 -| DD ]]$,
  then $[[ [DD]at1 = [DD ]at2 ]]$.
  Moreover, given
   $[[DD = DD1, evar, DD2]]$,
  we have $[[DD1 |-wf at2]]$,
\end{restatable}

With soundness of promotion, we can prove that the unification algorithm is also
sound:

\begin{restatable}[Soundness of Unification]{theorem}{prunifsound} \label{thm:pr_unif_soundness}%
  If $[[ GG |-u at1 ~= at2 -| DD ]]$,
  then $[[ [DD]at1 = [DD ]at2 ]]$.
\end{restatable}

We can further prove that promotion is complete using the notion of context
extension. Note that in the completeness statement we require $[[evar notin
fv(at1)]]$, or otherwise promotion would fail.

\begin{restatable}[Completeness of Promotion]{theorem}{prcomplete} \label{thm:pr_complete}%
  Given $[[ GG --> OO  ]]$,
  and $[[ GG |-wf evar  ]]$,
  and $[[ GG |-wf at1 ]]$,
  and $[[ [GG]evar = evar ]]$,
  and $[[ [GG]at1 = at1 ]]$,
  if $[[evar notin fv(at1)]]$,
  there exist $[[at2]]$, $[[DD]]$ and $[[OO']]$ such that
  $[[GG --> OO']]$ and $[[OO --> OO']]$
  and $[[  GG |-pr (evar) at1 ~~> at2 -| DD ]]$.
\end{restatable}

The completeness of unification is then built upon the completeness of promotion.

\begin{restatable}[Completeness of Unification]{theorem}{prunifcomplete} \label{thm:pr_unif_complete}%
  Given $[[ GG --> OO  ]]$,
  and $[[ GG |-wf at1  ]]$,
  and $[[ GG |-wf at2 ]]$,
  and $[[ [GG]at1 = at1 ]]$,
  and $[[ [GG]at2 = at2 ]]$,
  if $[[ [OO]at1 = [OO]at2 ]]$,
  there exist $[[DD]]$ and $[[OO']]$ such that
  $[[GG --> OO']]$ and $[[OO --> OO']]$
  and $[[  GG |-u at1 ~= at2 -| DD ]]$.
\end{restatable}


%%% Local Variables:
%%% mode: latex
%%% TeX-master: "../../Thesis"
%%% org-ref-default-bibliography: "../../Thesis.bib"
%%% End: