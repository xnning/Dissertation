%include polycode.fmt
%include rae.fmt

%if style == newcode
\begin{code}
  module Related where
\end{code}
%endif

\section{Dependent Type Systems with \Mode mode}
\label{sec:future:dep-type}

The \mode mode is possibly
applicable to systems with advanced features, where type inference is
sophisticated or even undecidable. One promising application is, for instance,
dependent type systems~\citep{xi:dependent}. Type systems with dependent types
usually unify the syntax for terms and types, with a single lambda abstraction
generalizing both type and lambda abstractions. Unfortunately, this means that
the $[[let]]$ desugar is not valid in those systems. As a concrete example,
consider desugaring the expression $[[let]]~[[a = int]]~\mathbf{in}~[[\x:a. x]] + [[1]]$
into $(\lambda [[a]]. [[\x:a. x]] + 1)~[[int]]$, which is ill-typed because the type
of $[[x]]$ in the abstraction body is $[[a]]$ and not $[[int]]$.


Because $[[let]]$ cannot be encoded, declarations cannot be encoded either.
Modeling declarations in dependently typed languages is a subtle matter, and
normally requires some additional complexity
\citep{severi:dependent:definitions}.


We believe that the same technique presented in \Cref{sec:AP:typeapplication}
can be adapted into a dependently typed language to enable a $[[let]]$ encoding.
In a dependent type system with unified syntax for terms and types, we can
combine the two forms in the typing context, i.e., $[[x: A]]$ and $[[a = A]]$,
into a unified form $[[x]] = [[e]] : [[A]]$. Then we can combine two application
rules \rref{ap-app-app} and \rref{ap-app-tapp} into \rref{ap-app-dapp}, and also
two abstraction rules \rref{ap-app-lam} and \rref{ap-app-tlam} into
\rref{ap-app-dlam}.
%
\begin{mathpar}
  \inferrule*[right=ap-app-dapp]{
    [[dd|-AP e2 => A1]] \\
    [[dd]] ; [[ss]], [[e2]]:[[A1]] [[|-AP]] [[e1]] [[=>]] [[B]]
  }{
    [[dd;ss|-AP e1 e2 => B]]
  }
  \and
  \inferrule*[right=ap-app-dlam]{
    [[dd]], [[x]] = [[e1 : A1]]; [[ss]] [[|-AP]] [[e]] [[=>]] [[B]]
  }{
    [[dd]] ; [[ss]], [[e1]] : [[A1]]  [[|-AP]] [[\x.e]] [[=>]] [[B]]
}
\end{mathpar}


With such rules it would be possible to handle declarations easily in dependent
type systems.

\section{Type Inference for Intersection Type Systems}
\label{sec:future:intersection-type}

Another type system that could possibly benefit from the \mode mode is
intersection type systems
\citep{pottinger1980type,coppo1979functional,Salle:1978aa}. In particular, we
consider intersection type systems with an explicit \textit{merge operator}
\citep{dunfield2014elaborating}. In such a system, we can construct terms of an
intersection type, like $[[1]] \, ,, \, [[true]]$ of type
$\inter{[[nat]]}{[[bool]]}$. Thanks to \emph{subtyping}, a term of type
$\inter{[[nat]]}{[[bool]]}$ can also be used as if it had type $[[int]]$, or as
if it had type $[[bool]]$. Calculi with \emph{disjoint intersection
  types}~\citep{oliveira2016disjoint,bi2019dis,alpuimdisjoint} incorporate a
\textit{coherent} merge operator. In such calculi the merge operator can merge
two terms with \textit{arbitrary} types as long as their types are disjoint;
disjointness conflicts are reported as type-errors. As illustrated by
\cite{xie:ecoop}, the expressive power of disjoint intersection types can encode
diverse programming language features, promising an economy of theory and
implementation.

Disjoint intersection types also pose challenges to type inference.
Supposing that we have $\mathsf{succ}: [[int -> int]]$ and $\mathsf{not} :
[[bool -> bool]]$, consider the following term:

$(\mathsf{succ} \, ,, \, \mathsf{not}) ~ 3 $

\noindent We expect the expression to type-check, as according to subtyping, the term
$(\mathsf{succ} \, ,, \, \mathsf{not})$ of type $(\inter{[[int ->
  int]]}{[[bool->bool]]})$ can also be used as type $[[int -> int]]$. Thus we
expect typing to automatically pick $\mathsf{succ}$ and apply it to $3$. To this
end, we need to push the type information of the argument ($3$)
into the function ($\mathsf{succ} \, ,, \, \mathsf{not}$).

Future work is required to explore how well the \mode mode can be used for type
inference in intersection type systems, and whether it can be integrated with
the distributivity subtyping rules of intersection types \citep{bi2019dis}.


\section{Gradualizing Type Classes}

In \Cref{sec:gradual:motivation}, we discussed about gradualizing modern
functional programming languages like Haskell. One of its core abstraction
features in Haskell is \textit{type classes}. Type classes
\citep{AdHocPolymorphism} were initially introduced in Haskell to make ad-hoc
overloading less ad-hoc, and since then have been adopted in many languages
including Mercury~\citep{mercury}, Coq~\citep{Sozeau2008},
PureScript~\citep{purescript}, and Lean~\citep{de2015lean}. An interesting
future direction then is to gradualizing type classes.

Consider again the example used in \Cref{sec:gradual:motivation}:

\begin{lstlisting}
(\f. (f 1, f 'a')) (\x. x)
\end{lstlisting}

\noindent While \lstinline{f : foralla. a -> a} is of course a valid type
annotation, it unfortunately rules out many valid arguments that may have type
class constraints in their types, e.g.,

\begin{lstlisting}
show     :: Show a => a -> String

(\f :: foralla. a -> a. (f 1, f 'a')) show     -- rejected
\end{lstlisting}

With gradual typing, if we annotation \lstinline{f} with the the
unknown type $[[unknown]]$, we expect that the following expression can type-check.

\begin{lstlisting}
(\f :: ?. (f 1, f 'a')) show
\end{lstlisting}

However, a nontrivial challenge in gradualizing type classes is that the dynamic
semantics of type classes is not expressed directly but rather by type-directed
elaboration into a simpler language without type classes. Thus the dynamic
semantics of type classes is given indirectly as the dynamic semantics of their
elaborated forms. Consider \lstinline{show} as an example. The
\textit{dictionary-passing} elaboration of type-classes translates the type of
\lstinline{show} into the following one, supposing \lstinline{ShowD} is
the dictionary type of the type class \lstinline{show}.

\begin{lstlisting}
show :: ShowD a -> a -> String
\end{lstlisting}

Now with the unknown type, we cannot predict how to elaborate the original
expression. In particular, if \lstinline{f} is applied to \lstinline{show}, it
means that \lstinline{f} needs to be elaborated into a function that actually
takes two arguments, first the dictionary and then the argument.

\begin{lstlisting}
  (\f. (f showInt 1, f showChar 'a')) show
\end{lstlisting}

This kind of uncertainty in elaboration brings extra complexity and may interact
with explicit casts in the target blame calculi.


\section{Generalized Algebraic Datatypes (GADTs)}
\label{sec:future:gadts}

A natural extension of \tit is to include GADTs. We have briefly discussed GADTs
in \Cref{sec:kind:ext:gadts}. In particular, we are interested in finding the
right formalization of GADTs.

Haskell's \emph{syntax} for GADT declarations is quite troublesome.
Consider these examples:
% 
\begin{code}
  data R a where
  MkR :: b -> R b
\end{code}
\begin{code}
  data S a where
  MkS :: S b
\end{code}
\begin{code}
  data T a where
  MkT :: forall (k :: *) (b :: k). T b
\end{code}
% 
In GHC's implementation of GADTs, any variables declared in the header (between |data| and
|where|) \emph{do not scope}. In all the examples above, the type variable |a| does not
scope over the constructor declarations. This is why we have written the variable |b| in
those types, to make it clear that |b| is distinct from |a|. We could have written |a|---it
would still be a distinct |a| from that in the header---but it would be more confusing.

The question is: how do we determine the kind of the parameter to the datatype? One
possibility is to look only in the header. In all cases above, we would infer no constraints
and would give each type a kind of |forall (k :: *). k -> *|. This is unfortunate, as
it would make |R| a kind-indexed GADT: the |MkR| constructor would carry a proof that
the kind of its type parameter is |*|. This, in turn, wreaks havoc with type inference, as
it is hard to infer the result type of a pattern-match against a GADT~\cite{vytiniotis2011outsidein}.

Furthermore, this approach might accept \emph{more} programs than the user wants.
Consider this definition:
\begin{spec}
  data P a where
  MkP1 :: b -> P b
  MkP2 :: f a -> P f
\end{spec}
Does the user want a kind-indexed GADT, noting that |b| and |f| have different kinds?
Or would the user want this rejected? If we make the fully general kind |forall k. k -> *|
for |P|, this would be accepted, perhaps surprising users.

It thus seems we wish
to look at the data constructors when inferring the kind of the datatype.
The challenge in looking at data constructors is that their variables are \emph{locally}
bound. In |MkR| and |MkS|, we implicitly quantify over |b|. In |MkR|, we discover that
|b :: *|, and thus that |R| must have kind |* -> *|. In |MkS|, we find no constraints
on |b|'s kind, and thus no constraints on |S|'s argument's kind, and so we can generalize
to get |S :: forall (k :: *). k -> *|. Let us now examine |MkT|: it explicitly brings
|k| and |b| into scope. Thus, the argument to |T| has \emph{local} kind |k|. It would
be impossible to unify the kind of |T|'s argument---call it $[[Xa]]$---with |k|, because
|k| would be bound to the \emph{right} of $[[Xa]]$ in an inference context. Thus it seems
we would reject |T|.

Our conclusion here is that the design of GADTs in GHC/Haskell is flawed: the
type variables mentioned in the header should indeed scope over the
constructors. This would mean we could reject |T|: if the user wanted to
explicitly make |T| polymorphically kinded, they could do so right in the
header. So one possible application of our work is to apply our insights in the
scoping (order in the context) and unification into formalizing GADTs.


%%% Local Variables:
%%% mode: latex
%%% TeX-master: "../../Thesis"
%%% org-ref-default-bibliography: "../../Thesis.bib"
%%% End: