\section{The Hindley-Milner Type System}

\begin{figure}[t]
    \centering
    \begin{tabular}{lrcl} \toprule
      Expressions & $[[e]]$ & $\Coloneqq$ & $ [[x]]  \mid [[n]] \mid [[ \x . e ]] \mid [[e1 e2]] \mid [[ let x = e1 in e2  ]] $ \\
      Types     & $[[A]]$ & $\Coloneqq$ & $[[\/ </ ai // i /> . t]]$ \\
      Monotypes & $[[t]]$ & $\Coloneqq$ & $ [[int]] \mid [[a]] \mid [[t1 -> t2]] $ \\
      Contexts & $[[dd]]$ & $\Coloneqq$ & $ [[empty]]  \mid [[dd , x : A]] $ \\
      \bottomrule
    \end{tabular}

    \drules[hm]{$ [[dd |-HM e : A ]] $}{Typing}{var, int, lam, app, let, gen, inst}

  \caption{Syntax and static semantics of the Hindley-Milner type system.}
  \label{fig:HM}
\end{figure}

The Hindley-Milner type system, hereafter referred to as HM, is a polymorphic
type discipline first discovered in \cite{hindley}, later rediscovered by
\cite{milner}, and also closely formalized by \cite{Damas:Milner}.

\subsection{Syntax}

The syntax of HM is given in \Cref{fig:HM}. The expressions $[[e]]$
include variables $[[x]]$, literals $[[n]]$, lambda abstractions $[[\x. e]]$,
applications $[[e1 e2]]$ and $[[let x = e1 in e2]]$. Note here lambda
abstractions have no type annotations, and the type information is to be
reconstructed by the type system.

Types consist of polymorphic types $[[A]]$ and monomorphic types $[[t]]$. A
polymorphic type is a sequence of universal quantifications (which can be empty)
followed by a monomorphic type $[[t]]$, which can be integer $[[int]]$, type
variable $[[a]]$ and function $[[t1 -> t2]]$.

A context $[[dd]]$ tracks the type information for variables. We implicitly
assume items in a context are distinct throughout the thesis.

% The standard representation of HM is often given without constants or primitive
% types, while they can be easily included. In our case, we include
% literals and the integer type as this system serves as the basis for later
% extensions, which often use primitive types for examples.


\subsection{Static Semantics}

The typing judgment $[[dd |-HM e : A]]$ derives the type $[[A]]$ of the
expression $[[e]]$ under the context $[[dd]]$. \Rref{hm-var} fetches a
polymorphic type $[[x : A]]$ from the context. Literals always have the integer
type (\rref{hm-int}). For lambdas (\rref{hm-lam}), since there is no
type for the binder given, the system \emph{guesses} a \emph{monomorphic}
type $[[t1]]$ as the type of $[[x]]$, and derives the type $[[t2]]$ as the body
$[[e]]$, returning a function $[[t1 -> t2]]$. The function type is then
eliminated by applications. In \rref{hm-app}, the type of the parameter must
match the argument's type $t1$, and the application returns type $[[t2]]$.

\Rref{hm-let} is the key rule for flexibility in HM, where a
\emph{polymorphic} expression can be defined, and later instantiated with
different types in the call sites. In this rule, the expression $[[e1]]$ has a
polymorphic type $[[A]]$, and the rule adds $[[e1 : A]]$ into the context to
type-check the body $[[e2]]$. 

\Rref{hm-gen} and \rref{hm-inst} correspond to type variable
\emph{generalization} and \emph{instantiation} respectively. In
\rref{hm-gen}, we can generalize over type variables $[[ </ ai // i /> ]]$ which
are not bound in the type context $[[dd]]$. In \rref{hm-inst}, we can
instantiate the type variables with arbitrary \emph{monomorphic} types.


\subsection{Principal Type Scheme}

\begin{figure}[t]
    \drules[hm-s]{$ [[|-HM A1 <: A2]] $}{Subtping}{refl,forallR,forallL}
  \caption{Subtyping in the Hindley-Milner type system.}
  \label{fig:HM:subtyping}
\end{figure}

One salient feature of HM is that the system enjoys the existence of
\emph{principal types}, without requiring any type annotations. Before we
present the definition of principal types, let's first define the
\emph{subtyping} relation among types.

The judgment $[[|-HM A1 <: A2]]$, given in \Cref{fig:HM:subtyping}, reads that
$[[A1]]$ is a subtype of $[[A2]]$. The subtyping relation indicates that
$[[A1]]$ is more \textit{general} than $[[A2]]$: for any instantiation of
$[[A2]]$, we can find an instantiation of $[[A1]]$ to make two types match.
\Rref{hm-s-refl} is simply reflexive for monotypes. \Rref{hm-s-forallR} has a
polymorphic type $[[\/a. A2]]$ on the right hand side. In order to prove the
subtyping relation for \textit{all} possible instantiation of $[[a]]$, we
\textit{skolemize} $[[a]]$, by making sure $[[a]]$ does not appear in $[[A1]]$
(up to $\alpha$-renaming). In this case, if $[[A1]]$ is still a subtype of
$[[A2]]$, we are sure then whatever $[[a]]$ can be instantiated to, $[[A1]]$ can
be instantiated to match $[[A2]]$. In \rref{hm-s-forallL}, by contrast, the
$[[a]]$ in $[[\/a . A1]]$ can be instantiated to any monotype to match the right
hand side.

Given the subtyping relation, now we can formally state that HM enjoys
\textit{principality}. That is, for every well-typed expression in HM, there
exists one type for the expression, which is more general than any other types
the expression can derive. Formally,

\begin{theorem}[Principality for HM]
  If $[[dd |-HM e : A]]$,
  then there exists $[[A']]$ such that $[[dd |-HM e : A']]$,
  and for all $[[A]]$ such that $[[dd |-HM e : A]]$,
  we have $[[|-HM A' <: A]]$.
\end{theorem}


% \subsection{Discussion}

% - type safety

% - sound and complete algorithm


%%% Local Variables:
%%% mode: latex
%%% TeX-master: "../../Thesis"
%%% org-ref-default-bibliography: "../Thesis.bib"
%%% End: