\section{The Hindley-Milner Type System}
\label{sec:HM}

\begin{figure}[t]
    \centering
    \begin{tabular}{lrcl} \toprule
      Expressions & $[[e]]$ & $\Coloneqq$ & $ [[x]]  \mid [[n]] \mid [[ \x . e ]] \mid [[e1 e2]] \mid [[ let x = e1 in e2  ]] $ \\
      Types     & $[[A]]$ & $\Coloneqq$ & $[[\/ </ ai // i /> . t]]$ \\
      Monotypes & $[[t]]$ & $\Coloneqq$ & $ [[int]] \mid [[a]] \mid [[t1 -> t2]] $ \\
      Contexts & $[[dd]]$ & $\Coloneqq$ & $ [[empty]]  \mid [[dd , x : A]] $ \\
      \bottomrule
    \end{tabular}

    \drules[hm]{$ [[dd |-HM e : A ]] $}{Typing}{var, int, lam, app, let, gen, inst}

  \caption{Syntax and static semantics of the Hindley-Milner type system.}
  \label{fig:HM}
\end{figure}

The global type-inference algorithms employed in modern functional languages
such as ML, Haskell and OCaml, are derived from the Hindley-Milner type system.
The Hindley-Milner type system, hereafter referred to as HM, is a polymorphic
type discipline first discovered in \cite{hindley}, later rediscovered by
\cite{milner}, and also closely formalized by \cite{Damas:Milner}. In what
follows, we first review its declarative specification, then discuss the
property of principality, and finally talk briefly about its algorithmic system.


\subsection{Declarative System}

The declarative system of HM is given in \Cref{fig:HM}.

\paragraph{Syntax.}

The expressions $[[e]]$ include variables $[[x]]$, literals $[[n]]$, lambda
abstractions $[[\x. e]]$, applications $[[e1 e2]]$ and $[[let x = e1 in e2]]$.
Note here lambda abstractions have no type annotations, and the type information
is to be reconstructed by the type system.

Types consist of polymorphic types $[[A]]$ and monomorphic types (monotypes) $[[t]]$. A
polymorphic type is a sequence of universal quantifications (which can be empty)
followed by a monotype $[[t]]$, which can be the integer type $[[int]]$, type
variables $[[a]]$ and function types $[[t1 -> t2]]$.

A context $[[dd]]$ tracks the type information for variables. We implicitly
assume items in a context are distinct throughout the thesis.

\paragraph{Typing.}

The declarative typing judgment $[[dd |-HM e : A]]$ derives the type $[[A]]$ of
the expression $[[e]]$ under the context $[[dd]]$. \Rref{hm-var} fetches a
polymorphic type $[[x : A]]$ from the context. Literals always have the integer
type (\rref{hm-int}). For lambdas (\rref{hm-lam}), since there is no type given
for the binder, the system \emph{guesses} a \emph{monotype} $[[t1]]$ as the type
of $[[x]]$, and derives the type $[[t2]]$ for the body $[[e]]$, returning a
function $[[t1 -> t2]]$. Function types are eliminated by applications. In
\rref{hm-app}, the type of the argument must match the parameter's type
$[[t1]]$, and the whole application returns type $[[t2]]$.

\Rref{hm-let} is the key rule for flexibility in HM, where a
\emph{polymorphic} expression can be defined, and later instantiated with
different types in the call sites. In this rule, the expression $[[e1]]$ has a
polymorphic type $[[A]]$, and the rule adds $[[x : A]]$ into the context to
type-check $[[e2]]$.

\Rref{hm-gen} and \rref{hm-inst} correspond to \emph{generalization} and
\emph{instantiation} respectively. In \rref{hm-gen}, we can generalize over type
variables $[[ </ ai // i /> ]]$ which are not bound in the type context
$[[dd]]$. In \rref{hm-inst}, we can instantiate the type variables with
arbitrary \emph{monotypes}.


\subsection{Principal Type Scheme}

\begin{figure}[t]
    \drules[hm-s]{$ [[|-HM A1 <: A2]] $}{Subtping}{refl,forallR,forallL}
  \caption{Declarative subtyping in the Hindley-Milner type system.}
  \label{fig:HM:subtyping}
\end{figure}

One salient feature of HM is that the system enjoys the existence of
\emph{principal types}, without requiring any type annotations. Before we
present the definition of principal types, let's first define the
\emph{subtyping} relation among types.

The judgment $[[|-HM A1 <: A2]]$, given in \Cref{fig:HM:subtyping}, reads that
$[[A1]]$ is a subtype of $[[A2]]$. The declarative subtyping relation indicates that
$[[A1]]$ is more \textit{general} than $[[A2]]$: for any instantiation of
$[[A2]]$, we can find an instantiation of $[[A1]]$ to make two types match.
\Rref{hm-s-refl} is simply reflexive for monotypes. \Rref{hm-s-forallR} has a
polymorphic type $[[\/a. A2]]$ on the right hand side. In order to prove the
subtyping relation for \textit{all} possible instantiations of $[[a]]$, we
\textit{skolemize} $[[a]]$, by making sure $[[a]]$ does not appear in $[[A1]]$
(up to $\alpha$-renaming). In this case, if $[[A1]]$ is still a subtype of
$[[A2]]$, we are sure then whatever $[[a]]$ can be instantiated to, $[[A1]]$ can
be instantiated to match $[[A2]]$. In \rref{hm-s-forallL}, by contrast, the
$[[a]]$ in $[[\/a . A1]]$ can be instantiated to any monotype to match the right
hand side. Here are some examples of the subtyping relation:

\begin{center}
  \begin{tabular}{rr}
    $[[|-HM]]$ & $ [[int -> int]][[<:]][[int -> int]]$ \\
    $[[|-HM]]$ & $ [[\/a. a -> a]][[<:]][[int -> int]]$ \\
  \end{tabular}
\end{center}

Given the subtyping relation, now we can formally state that HM enjoys
\textit{principality}. That is, for every well-typed expression in HM, there
exists one type for the expression, which is more general than any other types
the expression can derive. Formally,

\begin{theorem}[Principality for HM]
  If $[[dd |-HM e : A]]$,
  then there exists $[[A']]$ such that $[[dd |-HM e : A']]$,
  and for all $[[A'']]$ such that $[[dd |-HM e : A'']]$,
  we have $[[|-HM A' <: A'']]$.
\end{theorem}

Consider the expression $[[\x. x]]$. It has a principal type $[[\/a. a -> a]]$,
which is more general than any other options, e.g., $[[int -> int]]$, $[[(int ->
int) -> (int -> int)]]$, etc.

\subsection{Algorithmic Type System}

The declarative specification of HM given in \Cref{fig:HM} does not directly
lead to an algorithm. In particular, the system is not \textit{syntax-directed},
and there are still many guesses in the system, such as in \rref{hm-lam}.

\paragraph{Syntax-directed System.}

A type system is \textit{syntax-directed}, if the typing rules are completely
driven by the syntax of expressions; in other words, there is exactly one typing
rule for each syntactic form of expressions. However, in \Cref{fig:HM}, the rule
for generalization (\rref{hm-gen}) and instantiation (\rref{hm-inst}) can be
applied anywhere.

A syntax-directed presentation of HM can be easily derived. In particular, from the
typing rules we observe that, except for fetching a variable from the context
(\rref{hm-var}), the only place where a polymorphic type can be generated is for
the let expressions (\rref{hm-let}). Thus, a syntax-directed system of HM can be
presented as the original system, with instantiation applied to only variables,
and generalization applied to only let expressions. Specifically,
\begin{mathpar}
 \drule{hm-var-inst} \and \drule{hm-let-gen}
\end{mathpar}

A syntax-directed subtyping relation can also be derived, by restricting
\rref{hm-s-forallL} to allow only for a monotype on the right:
\begin{mathpar}
  \drule{hm-s-a-forallL}
\end{mathpar}


\paragraph{Type Inference.}

The guessing part of the system can be deterministically solved by the technique
of \textit{type inference}. There exists a sound and complete type inference
algorithm for HM \citep{Damas:Milner}, which has served as the basis for the
type inference algorithm for many other systems
\citep{odersky:putting,practical:inference}, including the system presented in
\Cref{chap:BiDirectional}. We will discuss more about it in
\Cref{chap:BiDirectional}.




%%% Local Variables:
%%% mode: latex
%%% TeX-master: "../../Thesis"
%%% org-ref-default-bibliography: "../Thesis.bib"
%%% End: