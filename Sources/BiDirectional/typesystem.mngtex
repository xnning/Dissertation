\section{Declarative System}

This section first presents the declarative, \emph{syntax-directed}
specification of \ap. The interesting aspects about the new type system
are: 1) the typing rules, which employ a combination of inference and \mode
modes; 2) the novel subtyping relation under an application context.

% Later, we prove our type system is type-safe by a type
% directed translation to System F\citep{systemF}.
% in
% Section~\ref{subsec:translation}. Finally an algorithmic type system is discussed
% in Section~\ref{subsec:algorithmic}.

\subsection{Syntax}

\begin{figure}
  \centering
  \begin{tabular}{lrcl} \toprule
    Expressions & $[[e]]$  & $\Coloneqq$ & $[[x]]  \mid [[n]]  \mid [[\x : A . e]] \mid [[ \x . e ]] \mid [[e1 e2]] $ \\
    Types       & $[[A]]$  & $\Coloneqq$ & $[[int]] \mid [[a]] \mid [[A1 -> A2]] \mid [[\/ a. A]] $ \\
    Monotypes   & $[[t]]$  & $\Coloneqq$ & $[[int]] \mid [[a]] \mid [[t1 -> t2]] $ \\
    Contexts    & $[[dd]]$ & $\Coloneqq$ & $[[empty]]  \mid [[dd , x : A]]  $ \\
    Application Contexts & $[[ss]]$ & $\Coloneqq$ & $[[empty]]  \mid [[ss, A]]  $ \\
    \bottomrule
    \end{tabular}
  \caption{Syntax of System \ap.}
  \label{fig:AP}
\end{figure}

The syntax of the language is given in \Cref{fig:AP}.

\paragraph{Expressions.}

The definition of expressions $[[e]]$ include variables ($[[x]]$), integers
($[[n]]$), annotated lambda abstractions ($[[\x:A . e]]$), lambda abstractions
($[[\x.e]]$), and applications ($[[e1 e2]]$). Notably, the syntax does not
include a $[[let]]$ expression ($[[let x = e1 in e2]]$). Let expressions can be
regarded as the standard syntax sugar $[[(\x. e2) e1]]$, as illustrated in more
detail later.

\paragraph{Types.} 

Types include the integer type $[[int]]$, type variables ($[[a]]$), functions
($[[A1 -> A2]]$) and polymorphic types ($[[\/a. A]]$). Monotypes are types
without universal quantifiers.


\paragraph{Contexts.}

Typing contexts $[[dd]]$ are standard: they map a term variable $[[x]]$ to its
type $[[A]]$. In this system, the context is modeled in a HM-style context
(\Cref{sec:HM}), which does not track type variables. Again, we implicitly
assume that all the variables in $[[dd]]$ are distinct.

The main novelty lies in the \emph{application contexts} $[[ss]]$, which are the
main data structure needed to allow types to flow from arguments to functions.
Application contexts are modeled as a stack. The stack collects the types of
arguments in applications. The context is a stack because if a type is pushed
last then it will be popped first. For example, inferring expression $[[e]]$
under application context ($[[a, int]]$), means $[[e]]$ is now being applied to
two arguments $[[e1]], [[e2]]$, with $[[e1:int]]$, $[[e2 :a]]$, so $[[e]]$
should be of type $[[int -> a -> A]]$ for some $[[A]]$.

\subsection{Type System}
\renewcommand{\transto}[1]{}

\begin{figure}
  \renewcommand\ottaltinferrule[4]{\inferrule*[narrower=0.6,lab=#1,#2] {#3} {#4}}
  \drules[ap-inf]{$ [[dd |-AP e => A ]] $}{Typing Inference}{int,lam,lamann}
  \drules[ap-app]{$ [[dd ; ss |-AP e => A ]] $}{Typing Application Mode}{var,lam,lamann,app}
  \drules[ap-s]{$ [[|-AP A1 <: A2 ]] $}{Subtyping}{tvar,int,arrow,forallL,forallR}
  \drules[ap-as]{$ [[ss |-AP A1 <: A2 ]] $}{Application Subtyping}{empty,forall,arrow}

  \caption{Typing rules of System AP.}
  \label{fig:AP:static}
\end{figure}

The top part of Figure \ref{fig:AP:static} gives the typing rules for our
language. The judgment $[[dd ; ss |-AP e => A]]$ is read as: under typing
context $[[dd]]$, and application context $[[ss]]$, $[[e]]$ has type $[[A]]$.
The standard inference mode $[[dd |-AP e => A]]$ can be regarded as a special
case when the application context is empty. Note that the variable names are
assumed to be fresh enough when new variables are added into the typing context,
or when generating new type variables.

We discuss the rules when the application context is empty first. Those rules
are unsurprising. \Rref{ap-inf-int} shows that integer literals are only
inferred to have type $[[int]]$ under an empty application context. This is
obvious since an integer cannot accept any arguments. \Rref{ap-inf-lam} deals
with lambda abstractions when the application context is empty. In this
situation, a monotype $[[t]]$ is \emph{guessed} for the argument, just like
previous calculi. \Rref{ap-inf-lamann} also works as expected: a new variable
$[[x]]$ is put with its type $[[A]]$ into the typing context, and inference
continues on the abstraction body.

Now we turn to the cases when the application context is not empty.
\Rref{ap-app-var} says that if $[[x: A1]]$ is in the typing context, and
$[[A1]]$ is a subtype of $[[A2]]$ under application context $[[ss]]$, then
$[[x]]$ has type $[[A2]]$. It depends on the subtyping rules that are explained
in \Cref{sec:AP:subtyping}.

\Rref{ap-app-lam} shows the strength of application contexts. It states that, without
annotations, if the application context is non-empty, a type can be popped from
the application context to serve as the type for $[[x]]$. Inference of the body then
continues with the rest of the application context. This is possible, because
the expression $[[\x. e]]$ is being applied to an argument of type $[[A1]]$, which
is the type at the top of the application context stack.

For lambda abstraction with annotations $[[\x:A1. e]]$, if the and the
application context has $[[A2]]$, then \rref{ap-app-lamann} first checks that
$[[A2]]$ is a subtype of $[[A1]]$ before putting $[[x:A1]]$ in the typing
context. However, note that it is always possible to remove annotations in an
abstraction if it has been applied to some arguments.

\Rref{ap-app-app} pushes types into the application context. The application
rule first infers the type of the argument $[[e2]]$ with type $[[A1]]$. Then the
type $[[A1]]$ is generalized in the same way as the HM type system. The
resulting generalized type is $[[A2]]$. Thus the type of $[[e1]]$ is now
inferred under an application context extended with type $[[A2]]$. The
generalization step is important to infer higher ranked types: since $[[A2]]$ is
a possibly polymorphic type, which is the argument type of $[[e1]]$, then
$[[e1]]$ is of possibly a higher rank type.

\paragraph{Let Expressions.}

The language does not have built-in let expressions, but instead supports
$[[let]]$ as syntactic sugar. Recall the syntactic-directed typing rule
(\rref{hm-let-gen}) for let expressions with generalization in the HM system.
With slight reformat to match AP, we get (without the gray-shaded part):
%
\[
  \inferrule{[[dd |- e1 => A1]]\\
    [[</ ai // i /> = fv (t) - fv(dd)]] \\
    [[A2 = \/ </ai // i /> . A1]] \\
    [[dd, x:A2]] ; \hlmath{[[ss]]} [[|-]] [[e2]] [[=>]] [[A3]]}
  {[[dd]] ; \hlmath{[[ss]]} [[|-]] [[let x = e1 in e2]] [[=>]] [[A3]] }
\]

\noindent where we do generalization on the type of $[[e1]]$, which is then
assigned as the type of $[[x]]$ while inferring $[[e2]]$. Adapting this rule to
our system with application contexts would result in the gray-shaded part, where
the application context is only used for $[[e2]]$, because $[[e2]]$ is the
expression being applied. If we desugar the let expression ($[[let x = e1 in
e2]]$) to $[[(\x. e2) e1]]$, we have the following derivation:
%
\renewcommand\ottaltinferrule[4]{\inferrule*[narrower=1.2,lab=#1,#2] {#3} {#4}}
\[
  \inferrule{[[dd |- e1 => A1]] \quad\,\,
    [[</ ai // i /> = fv (A1) - fv(dd)]] \quad\,\,
    [[A2 = \/ </ai // i /> . A1]] \quad\,\,
    \inferrule{[[dd,x:A2 ; ss |- e2 => A3]]}
    {[[dd;ss,A2 |- \x. e2 => A2 -> A3]]}}
  {[[dd;ss |- (\x. e2) e2 => A3]]}
\]

\noindent The type $[[A2]]$ is now pushed into application context in
\rref{ap-app-app}, and then assigned to $[[x]]$ in \rref{ap-app-lam}. Comparing
this with the typing derivations for let expressions, we now have same
preconditions. Thus we can see that the rules in \Cref{fig:AP:static} are
sufficient to express an HM-style polymorphic let construct.

\paragraph{Metatheory.}

The type system enjoys several interesting properties, especially lemmas about
application contexts. Before we present those lemmas, we need a helper
definition of what it means to use arrows on application contexts.

\begin{definition}[$[[ss -> A]]$]
  If $[[ss]] = [[A1]], [[A2]], ... [[An]]$,
  then $[[ss -> A]]$ means the function type $[[An]] [[->]] ... [[->]] [[A2 -> A1 -> A]]$.
\end{definition}

Such definition is useful to reason about the typing result with application
contexts. One specific property is that the application context determines the
form of the typing result.

\begin{lemma}[$[[ss]]$ Coincides with Typing Results]
  \label{lemma:app-coin-typing}
  If $[[dd;ss |-AP e => A]]$,
  then for some $[[A']]$,
  we have $[[A = ss -> A']]$.
\end{lemma}

Having this lemma, we can always use the judgment $[[dd;ss |-AP e => ss -> A']]$
instead of $[[dd;ss|-AP e => A]]$.

In traditional bi-directional type checking, we often have one subsumption rule
that transfers between inference and checked mode, which states that if an
expression can be inferred to some type, then it can be checked with this type
(e.g., \rref{dk-chk-sub} in DK). In our system, we regard the normal inference
mode $[[dd |-AP e => A]]$ as a special case, when the application context is
empty. We can also turn from normal inference mode into application mode with an
application context.

\begin{lemma}[Subsumption]
  If $[[dd |-AP e => ss -> A]]$,
  then $[[dd;ss |-AP e => ss -> A]]$.
\end{lemma}

This lemma is actually a special case for the following one:

\begin{lemma}[Generalized Subsumption]
  If $[[dd;ss1 |-AP e => ss1 -> ss2 -> A]]$,
  then $[[dd;ss2,ss1 |-AP e=> ss1 -> ss2 -> A]]$.
\end{lemma}

The relationship between our system and standard Hindley Milner type system (HM)
can be established through the desugaring of let expressions. Namely, if $[[e]]$
is typeable in HM, then the desugared expression $[[e']]$ is typeable in our
system, with a more general typing result.

\begin{lemma}[AP Conservative over HM]
  If $[[dd|-HM e : A]]$,
  and desugaring let expression in $[[e]]$ gives back $[[e']]$,
  then for some $[[A']]$,
  we have $[[dd |-AP e' => A']]$,
  and $ A' <: A$.
\end{lemma}

\subsection{Subtyping}
\label{sec:AP:subtyping}

We present our subtyping rules at the bottom of Figure \ref{fig:AP:static}.
Interestingly, our subtyping has two different forms.

\paragraph{Subtyping.} The first subtyping judgment $[[|-AP A1 <: A2]]$ follows
OL, but in HM-style; that is, without tracking type variables.
% \Rref{ap-s-tvar} and \rref{ap-s-int} are trivial. In \rref{ap-s-fun},
% subtyping is contravariant on the argument type, and covariant on the return
% type.
\Rref{ap-s-forallR} states $[[A1]]$ is subtype of $[[\/ a . A2]]$ only if
$[[A1]]$ is a subtype of $[[A2]]$, with the assumption $[[a]]$ is a fresh
variable. \Rref{ap-s-forallL} says $[[\/ a. A1]]$ is a subtype of $[[A2]]$ if we
can instantiate it with some $[[t]]$ and show the result is a subtype of
$[[A2]]$.

\paragraph{Application Subtyping.} The typing \rref{ap-app-var} uses the second
subtyping judgment $[[ss|-AP A1 <: A2]]$. To motivate this new kind of judgment,
consider the expression $[[id 1]]$ for example, whose derivation is stuck
at \rref{ap-app-var} (here we assume $[[id:\/a.a -> a]] \in [[dd]]$):
%
\[
  \inferrule*[right=ap-app-app]{[[dd|-AP 1 => int]]\quad
    \emptyset = [[ fv(int) - fv(dd) ]] \quad
      \inferrule*[right=ap-app-var]{ [[id]]:[[\/a.a -> a]] \in [[dd]]\quad
        \mathsf{???}}
      {[[dd;int |-AP id => question ]]}
    }{[[dd |-AP id 1 => question ]] }
\]

\noindent
Here we know that $[[id:\/a.a->a]]$ and also, from the application context, that
$[[id]]$ is applied to an argument of type $[[int]]$. Thus we need a mechanism
for solving the instantiation $[[a=int]]$ and return a supertype $[[int->int]]$
as the type of $[[id]]$. This is precisely what the application subtyping
achieves: resolve instantiation constraints according to the application
context. Notice that unlike existing works (\cite{practical:inference} or
DK),application subtyping provides a way to solve instantiation more
\textit{locally}, since it does not mutually depend on typing.

Back to the rules in \Cref{fig:AP:static}, one way to understand the judgment
$[[ss|-AP A1 <: A2]]$ from a computational point-of-view is that the type
$[[A2]]$ is a \emph{computed} output, rather than an input. In other words
$[[A2]]$ is determined from $[[ss]]$ and $[[A1]]$. This is unlike the judgment
$[[|-AP A1<:A2]]$, where both $[[A1]]$ and $[[A2]]$ would be computationally
interpreted as inputs. Therefore it is not possible to view $[[|-AP A1 <: A2]]$
as a special case of $[[ss|-AP A1 <: A2]]$ where $[[ss]]$ is empty.

There are three rules dealing with application contexts. \Rref{ap-as-empty} is
for case when the application context is empty. Because it is empty, we have no
constraints on the type, so we return it back unchanged. Note that this is where
HM-style systems (also \citet{practical:inference}) would normally use an
instantiation rule (e.g. \rref{hm-inst} in HM) to remove top-level quantifiers.
Our system does not need the instantiation rule, because in applications, type
information flows from arguments to the function, instead of function to
arguments. In the latter case, the instantiation rule is needed because a
function type is wanted instead of a polymorphic type. In our approach,
instantiation of type variables is avoided unless necessary.

The two remaining rules apply when the application context is non-empty, for
polymorphic and function types respectively. Note that we only need to deal with
these two cases because $[[int]]$ or type variables $[[a]]$ cannot have a
non-empty application context. In \rref{ap-as-forall}, we instantiate the
polymorphic type with some $[[t]]$, and continue. This instantiation is forced
by the application context. In \rref{ap-as-arrow}, one function of type
$[[A1->A2]]$ is now being applied to an argument of type $[[A3]]$. So we check
$[[|-AP A3 <: A1]]$. Then we continue with $[[A2]]$ and the rest application context,
and return $[[A3->A4]]$ as the result type of the function.

\paragraph{Metatheory.}

Application subtyping is novel in our system, and it enjoys some interesting
properties. For example, similarly to typing, the application context decides
the form of the supertype.

\begin{lemma}[$[[ss]]$ Coincides with Subtyping Results]
  \label{lemma:app-coin-subtyping}
  If $[[ss|-AP A1<:A2]]$,
  then for some $[[A3]]$,
  $[[A2 = ss -> A3]]$.
\end{lemma}

Therefore we can always use the judgment $[[ss|-AP A1<:ss -> A2]]$, instead of
$[[ss|-AP A1<:A2]]$. Application subtyping is also reflexive and transitive.
Interestingly, in those lemmas, if we remove all applications contexts, they are
exactly the reflexivity and transitivity of traditional subtyping.

\begin{lemma}[Reflexivity of Application Subtyping]
  $[[ss|-AP ss -> A <: ss -> A]]$.
\end{lemma}

\begin{lemma}[Transitivity of Application Subtyping]
  If $[[ss1 |-AP  A1 <: ss1 -> A2]]$,
  and $[[ss2 |-AP A2 <: ss2 -> A3]]$,
  then $[[ss2, ss1 |-AP A1 <: ss1 -> ss2 -> A3]]$.
\end{lemma}

Finally, we can convert between subtyping and application subtyping. We can
remove the application context and still get a subtyping relation:

\begin{lemma}[$[[ss]][[|-AP]]$ to $[[|-AP]]$]
  If $[[ss|-AP A1 <: A2]]$,
  then $[[|-AP A1 <: A2]]$.
\end{lemma}

Transferring from subtyping to application subtyping will result in a more
general type.

\begin{lemma}[$[[|-AP]]$ to $[[ss]][[|-AP]]$]
  If $[[|-AP A1 <: ss -> A2]]$,
  then for some $[[A3]]$,
  we have $[[ss |-AP A1 <: ss -> A3]]$,
  and $[[|-AP A3 <: A2]]$.
\end{lemma}

This lemma may not seem intuitive at first glance. Consider a concrete example.
Consider the derivation for $[[|-AP int -> \/a. a <: int -> int]]$:
%
  \[
    \inferrule*[right=\rref*{ap-s-arrow}]{
      \inferrule*[right=\rref*{ap-s-int}]{\quad}{[[|-AP int <: int]]} \\
      \inferrule*[right=\rref*{ap-s-forallL}]{
         \inferrule*[right=\rref*{ap-s-int}]{\quad}{[[|-AP int <: int]]}
      }{[[|-AP \/a .a <: int]]} \\
    }{
      [[|-AP int -> \/a. a <: int -> int]]}
  \]
%
\noindent and for $[[int |-AP int -> \/a.a <: int -> \/a.a]]$:
%
  \[
    \inferrule*[right=\rref*{ap-as-arrow}]{
      \inferrule*[right=\rref*{ap-s-int}]{\quad}{[[|-AP int <: int]]} \\
      \inferrule*[right=\rref*{ap-as-empty}]{
      }{
        [[|-AP \/a.a <: \/a.a]]
      }
    }{
      [[int |-AP int -> \/a.a <: int -> \/a.a]]
    }
  \]
%
\noindent The former one, holds because we have
$[[|-AP \/a.a <: int]]$ in the return type. But in the latter one, after
$[[int]]$ is consumed from application context, we eventually reach \rref{ap-as-empty},
which always returns the original type back.

%%% Local Variables:
%%% mode: latex
%%% TeX-master: "../../Thesis"
%%% org-ref-default-bibliography: "../../Thesis.bib"
%%% End: