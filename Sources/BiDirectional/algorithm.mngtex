\section{Type Inference Algorithm}

Even though our specification is syntax-directed, it does not directly lead to
an algorithm, because there are still many guesses in the system, such as in
\rref{ap-inf-lam}. This subsection presents a brief introduction of the
algorithm, which closely follows the approach by \citet{practical:inference}.

Instead of guessing, the algorithm creates \textit{meta} type variables $[[Xa]], [[Xb]]$
which are waiting to be solved. The judgment for the algorithmic type system is
%
\[
   (S_0, N_0) ; [[dd ; ss |-AP e => A]] \hookrightarrow (S_1, N_1)
\]
%
Here we use $N$ as name supply, from which we can always extract new names.
Also, every time a meta type variable is solved, we need to record its solution.
We use $S$ as a notation for the substitution that maps meta type variables to
their solutions. For example, \rref{ap-inf-lam} becomes
%
\[
  \inferrule*[right=ap-inf-lam-algo]{
    (S_0, N_0) ; [[dd]], [[x]]:[[Xb]] [[|-AP]] [[\x. e]] [[=>]] [[A]] \hookrightarrow (S_1, N_1)
  }{
    (S_0, N_0[[Xb]]) ; [[dd]] [[|-AP]] [[\x.e]] [[=>]] [[Xb]] [[->]] [[A]] \hookrightarrow (S_1, N_1)
  }
\]
%
Comparing it to rule \rref{ap-inf-lam}, $[[t]]$ is replaced by a new meta type
variable $[[Xb]]$ from name supply $N0[[Xb]]$. But despite of the name supply
and substitution, the rule retains the structure of \rref{ap-inf-lam}.

Having the name supply and substitutions, the algorithmic system is a direct
extension of the specification in \Cref{fig:AP:static}, with a process to
do unifications that solve meta type variables. Such unification process is
quite standard and similar to the one used in the Hindley-Milner system. We
proved our algorithm is sound and complete with respect to the specification.
Here \textit{fmv} means free meta type variables.

\begin{theorem}[Soundness]
  If $([], N_0) ; [[dd |-AP e => A]] \hookrightarrow (S_1, N_1)$,
  then for any substitution $V$
  with $dom(V) = $ \textit{fmv} $(S_1 [[dd]], S_1 [[A]])$,
  we have $V S_1 [[dd]] [[|-AP]] [[e]] [[=>]] VS_1[[A]]$.
\end{theorem}

\begin{theorem}[Completeness]
  If $[[dd|-AP e => A]]$,
  then for a fresh $N_0$,
  we have $([], N_0); [[dd |-AP e => B]] \hookrightarrow (S_1, N_1)$,
  and for some $S_2$,
  if $[[</ai//i/>]] = [[fv(dd)]] - [[fv]](S_2 S_1 [[B]])$,
  and $[[</bi//i/> = fv(dd) - fv(A)]]$,
  we have $ [[|-AP]] [[\/]] [[</ai//i/>]] . S_2 S_1 [[B]] [[<:]] [[\/]] [[</bi//i/>]] . [[A]] $.
\end{theorem}

%%% Local Variables:
%%% mode: latex
%%% TeX-master: "../../Thesis"
%%% org-ref-default-bibliography: "../../Thesis.bib"
%%% End: