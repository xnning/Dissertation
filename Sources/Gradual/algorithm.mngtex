\section{Algorithmic Type System}
\label{sec:gradual:algorithm}

In this section we give a bidirectional account of the algorithmic type system
that implements the declarative specification. The algorithm is largely inspired
by the algorithmic bidirectional system of DK \citet{DK}. However our
algorithmic system differs from theirs in three aspects: (1) the addition of the
unknown type $\unknown$; (2) the use of the matching judgment; and 3) the
approach of \emph{gradual inference only producing static
  types}~\citep{garcia2015principal}. We then prove that our algorithm is both
sound and complete with respect to the declarative type system. We also provide
an implementation.

\paragraph{Algorithmic Contexts.}

\begin{figure}
  \centering
    \begin{tabular}{lrcl} \toprule
      Expressions & $[[ae]]$ & \syndef & $[[x]] \mid [[n]] \mid [[ \x : aA . ae ]]  \mid  [[\x . ae]] \mid [[ae1 ae2]] \mid [[ae : aA]] \mid [[ let x = ae1 in ae2  ]] $ \\
      Types & $[[aA]] $ & \syndef & $ [[int]] \mid [[a]] \mid [[evar]] \mid [[aA1 -> aA2]] \mid [[\/ a. aA]] \mid [[unknown]] $ \\
      Monotypes & $[[at]], [[as]]$ & \syndef & $ [[int]] \mid [[a]] \mid [[evar]] \mid [[at -> as]] $ \\
      Algorithmic Contexts & $[[GG]], [[DD]], [[TT]]$ & \syndef & $[[empty]] \mid [[GG , x : aA]] \mid [[GG , a]] \mid [[GG , evar]] \mid [[GG, evar = at]] \mid [[ GG , mevar]] $ \\
      Complete Contexts & $[[OO]]$ & \syndef & $[[empty]] \mid [[OO , x : aA]] \mid [[OO , a]] \mid [[OO, evar = at]] \mid [[ OO, mevar]]   $ \\ \bottomrule
    \end{tabular}

    \drules[gpc-ad]{$ [[GG |-G aA ]] $}{Well-formedness of types}{int, unknown, tvar, evar, solved, arrow, forall}

    \drules[gpc-wf]{$ [[ |-G GG ]] $}{Well-formedness of algorithmic contexts}{empty, var, tvar, evar, solved, marker}
  \caption{Syntax and well-formedness of the algorithmic \gpc}
  \label{fig:gradual:algo-syntax}
\end{figure}

The top of \Cref{fig:gradual:algo-syntax} shows the syntax of the algorithmic
system. A noticeable difference are the algorithmic contexts $[[GG]]$, which are
represented as an \emph{ordered} list containing declarations of type variables
$[[a]]$ and term variables $[[x : aA]]$. Unlike declarative contexts,
algorithmic contexts also contain declarations of existential type variables
$[[evar]]$, which can be either unsolved (written $[[evar]]$) or solved to some
monotype (written $[[evar = at]]$). Finally, algorithmic contexts include a
\textit{marker} $[[ mevar ]]$ (read ``marker $[[evar]]$'' ), which is used to
delineate existential variables created by the algorithm. We will have more to
say about markers when we examine the rules. Complete contexts $[[OO]]$ are the
same as contexts, except that they contain no unsolved variables.

Apart from expressions in the declarative system, we add annotated expressions
$[[ ae : aA ]]$. The well-formedness judgments for types and contexts are shown
in \Cref{fig:gradual:algo-syntax}.

\paragraph{Notational convenience.}

Following DK system, we use contexts as substitutions on types. We write $[[
[GG]aA ]]$ to mean $[[GG]]$ applied as a substitution to type $[[aA]]$. We also
use a hole notation, which is useful when manipulating contexts by inserting and
replacing declarations in the middle. The hole notation is used extensively in
proving soundness and completeness. For example, $[[GG]] [ [[TT]] ]$ means
$[[GG]]$ has the form $[[GL]], [[TT]], [[GR]]$; if we have $[[ GG[evar] ]] =
[[(GL, evar, GR)]]$, then $[[ GG[evar = at] ]] = [[(GL, evar = at, GR)]] $.
Occasionally, we will see a context with two \emph{ordered} holes, e.g., $[[GG]]
= [[ GG0[TT1][TT2] ]]$ means $[[GG]]$ has the form $[[ GL, TT1, GM, TT2, GR ]]$.

\paragraph{Input and output contexts.}

The algorithmic system, compared with the declarative system, includes similar
judgment forms, except that we replace the declarative context $[[dd]]$ with an
algorithmic context $[[GG]]$ (the \emph{input context}), and add an \emph{output
  context} $[[DD]]$ after a backward turnstile, e.g., $[[ GG |-G aA1 <~ aA2 -| DD
]]$ is the judgment form for the algorithmic consistent subtyping. All
algorithmic rules manipulate input and output contexts in a way that is
consistent with the notion of \emph{context extension}, which will be described
in \Cref{sec:gradual:ctxt:extension}.

We start with the explanation of the algorithmic consistent subtyping as it
involves manipulating existential type variables explicitly (and solving them if
possible).


\subsection{Algorithmic Consistent Subtyping}
\label{sec:gradual:algo:subtype}

\begin{figure}
  \centering

    \drules[gpc-as]{$ [[GG |-G aA1 <~ aA2 -| DD ]] $}{Under input context $[[GG]]$, $[[aA1]]$ is a consistent subtype of $[[aA2]]$, with output context $[[DD]]$}{tvar, int, evar, unknownL, unknownR, arrow, forallR, forallL,  instL, instR}

  \caption{Algorithmic consistent subtyping}
  \label{fig:gradual:algo:subtype}
\end{figure}

\Cref{fig:gradual:algo:subtype} presents the rules of algorithmic consistent
subtyping $[[GG |-G aA1 <~ aA2 -| DD ]]$, which says that under input context
$[[GG]]$, $[[aA1]]$ is a consistent subtype of $[[aA2]]$, with output context
$[[DD]]$. The first five rules do not manipulate contexts, but illustrate how
contexts are propagated.

\Rref{gpc-as-tvar} and \rref{gpc-as-int} do not involve existential variables, so the
output contexts remain unchanged. \Rref{gpc-as-evar} says that any unsolved
existential variable is a consistent subtype of itself. The output is still the
same as the input context as the rule gives no clue as to what is the solution
of that existential variable. \Rref{gpc-as-unknownL,as-unknownR} are the
counterparts of \rref{gpc-cs-unknownL} and \rref{gpc-cs-unknownR}.


\Rref{gpc-as-arrow} is a natural extension of its declarative counterpart. The
output context of the first premise is used by the second premise, and the
output context of the second premise is the output context of the conclusion.
Note that we do not simply check $[[ aA2 <~ aA4 ]]$, but apply $[[TT]]$ (the input
context of the second premise) to both types (e.g., $[[ [TT]aA2 ]]$). This is to
maintain an important invariant: whenever $[[ GG |-G aA1 <~ aA2 -| DD ]]$ holds,
the types $[[aA1]]$ and $[[aA2]]$ are fully applied under input context $[[GG]]$
(they contain no existential variables already solved in $[[GG]]$). The same
invariant applies to every algorithmic judgment.


\Rref{gpc-as-forallR}, similar to the declarative \rref{gpc-cs-forallR}, adds
$[[a]]$ to the input context. Note that the output context of the premise allows
additional existential variables to appear after the type variable $[[a]]$, in a
trailing context $[[TT]]$. These existential variables could depend on $[[a]]$;
since $[[a]]$ goes out of scope in the conclusion, we need to drop them from the
concluding output, resulting in $[[DD]]$. The next rule is essential to
eliminating the guessing work. Instead of guessing a monotype $[[t]]$ out of
thin air, \rref{gpc-as-forallL} generates a fresh existential variable $[[evar]]$,
and replaces $[[a]]$ with $[[evar]]$ in the body $[[aA]]$. The new existential
variable $[[evar]]$ is then added to the input context, just before the marker
$[[mevar]]$. The output context ($[[ DD, mevar, TT ]]$) allows additional
existential variables to appear after $[[mevar]]$ in $[[TT]]$. For the same
reasons as in \rref{gpc-as-forallR}, we drop them from the output context. A central
idea behind these two rules is that we defer the decision of picking a monotype
for a type variable, and hope that it could be solved later when we have more
information at hand. As a side note, when both types are universal quantifiers,
then either \rref{gpc-as-forallR} or \rref{gpc-as-forallL} could be tried. In practice,
one can apply \rref{gpc-as-forallR} eagerly as it is invertible.

The last two rules (\rref{gpc-as-instL} and \rref{gpc-as-instR}) are specific to the
algorithm, thus having no counterparts in the declarative version. They both
check consistent subtyping with an unsolved existential variable on one side and
an arbitrary type on the other side. Apart from checking that the existential
variable does not occur in the type $[[A]]$, both rules do not directly solve the
existential variables, but leave the real work to the instantiation judgment.

\subsection{Instantiation}
\label{sec:gradual:algo:instantiate}


\begin{figure}
  \centering
    \drules[gpc-instl]{$ [[ GG |-G evar <~~ aA -| DD   ]] $}{Under input context $[[GG]]$, instantiate $[[evar]]$ such that $[[evar <~ aA]]$, with output context $[[DD]]$}{solve, solveU, reach, forallR, arr}

    \drules[gpc-instr]{$ [[ GG |-G aA <~~ evar -| DD   ]] $}{Under input context $[[GG]]$, instantiate $[[evar]]$ such that $[[aA <~ evar]]$, with output context $[[DD]]$}{solve, solveU, reach, forallL, arr}

  \caption{Algorithmic instantiation}
  \label{fig:gradual:algo:instantiate}
\end{figure}


Two symmetric judgments $[[ GG |-G evar <~~ aA -| DD ]]$ and $[[ GG |-G aA <~~
evar -| DD ]]$ defined in \cref{fig:gradual:algo:instantiate} instantiate
unsolved existential variables. They read ``under input context $[[GG]]$,
instantiate $[[evar]]$ to a consistent subtype (or supertype) of $[[aA]]$, with
output context $[[DD]]$''. The judgments are extended naturally from DK system,
whose original inspiration comes from \citet{cardelli1993implementation}. Since
these two judgments are mutually defined, we discuss them together.

\Rref{gpc-instl-solve} is the simplest one -- when an existential variable meets a
monotype -- where we simply set the solution of $[[evar]]$ to the monotype
$[[at]]$ in the output context. We also need to check that the monotype $[[at]]$
is well-formed under the prefix context $[[GG]]$.

\Rref{gpc-instl-solveU} is similar to \rref{gpc-as-unknownR} in that we put no
constraint\footnote{As we will see in \Cref{chap:Dynamic}
  where we present a more refined system, the ``no constraint'' statement is not
  entirely true. } on $[[evar]]$ when it meets the unknown type $[[unknown]]$.
This design decision reflects the point that type inference only produces static
types~\citep{garcia:principal}.

\Rref{gpc-instl-reach} deals with the situation where two existential variables
meet. Recall that $[[ GG[evar][evarb]  ]]$ denotes a context where some unsolved existential
variable $[[evar]]$ is declared before $[[evarb]]$. In this situation, the only logical
thing we can do is to set the solution of one existential variable to the other
one, depending on which one is declared before. For example, in the output
context of \rref{gpc-instl-reach}, we have $[[evarb]] = [[evar]]$ because in the input
context, $[[evar]]$ is declared before $[[evarb]]$.

\Rref{gpc-instl-forallR} is the instantiation version of \rref{gpc-as-forallR}.
Since our system is predicative, $[[evar]]$ cannot be instantiated to $[[\/b.
aA]]$, but we can decompose $[[ \/b. aA ]]$ in the same way as in
\rref{gpc-as-forallR}. \Rref{gpc-instr-forallL} is the instantiation version of
\rref{gpc-as-forallL}.

\Rref{gpc-instl-arr} applies when $[[evar]]$ meets an arrow type. It follows
that the solution must also be an arrow type. This is why, in the first premise,
we generate two fresh existential variables $[[evar1]]$ and $[[evar2]]$, and
insert them just before $[[evar]]$ in the input context, so that we can solve
$[[evar]]$ to $[[ evar1 -> evar2 ]]$. Note that the first premise $[[ aA1 <~~
evar1 ]]$ switches to the other instantiation judgment.

\subsection{Algorithmic Typing}
\label{sec:gradual:algo:typing}

\begin{figure}
  \centering
    \drules[gpc-inf]{$ [[ GG |-G ae => aA -| DD ]] $}{Under input context $[[GG]]$, $[[ae]]$ infers output type $[[aA]]$, with output context $[[DD]]$}{var, int, anno, lamann, lam, let, app}

    \drules[gpc-chk]{$ [[ GG |-G ae <= aA -| DD ]] $}{Under input context $[[GG]]$, $[[ae]]$ checks against input type $[[aA]]$, with output context $[[DD]]$}{lam, gen, sub}

    \drules[gpc-am]{$ [[ GG |-G aA |> aA1 -> aA2 -| DD ]] $}{Under input context $[[GG]]$, $[[aA]]$ matches output type $[[aA1 -> aA2]]$, with output context $[[DD]]$}{forall, arr, unknown, var}

  \caption{Algorithmic typing}
  \label{fig:gradual:algo:typing}
\end{figure}

We now turn to the algorithmic typing rules in \Cref{fig:gradual:algo:typing}.
Because general type inference for System F is
undecidable~\citep{F:undecidable}, our algorithmic system uses bidirectional
type checking to accommodate (first-class) polymorphism. Traditionally, two
modes are employed in bidirectional systems: the checking mode $[[ GG |-G ae <=
aA -| TT ]]$, which takes a term $[[ae]]$ and a type $[[aA]]$ as input, and
ensures that the term $[[ae]]$ checks against $[[aA]]$; the inference mode $[[
GG |-G ae => aA -| TT ]]$, which takes a term $[[ae]]$ and produces a type
$[[aA]]$. We first discuss rules in the inference mode.

\Rref{gpc-inf-var} and \rref{gpc-inf-int} do not generate any new information
and simply propagate the input context. \Rref{gpc-inf-anno} is standard, switching
to the checking mode in the premise.

In \rref{gpc-inf-lamann}, we generate a fresh existential variable $[[evarb]]$
for the function codomain, and check the function body against $[[evarb]]$. Note
that it is tempting to write $[[ GG, x : aA |-G ae => aA2 -| DD, x : aA, TT ]]$ as
the premise (in the hope of better matching its declarative counterpart
\rref{gpc-lamann}), which has a subtle consequence. Consider the expression $[[ \x :
int. \y . y ]]$. Under the new premise, this is untypable because of $[[ empty
|-G \x : int. \y . y => int -> evar -> evar -| empty ]]$ where $[[evar]]$ is not
found in the output context. This explains why we put $[[evarb]]$ \emph{before}
$ [[ x : aA ]] $ so that it remains in the output context $[[DD]]$.
\Rref{gpc-inf-lam}, which corresponds to \rref{gpc-lam}, one of the guessing rules, is
similar to \rref{gpc-inf-lamann}. As with the other algorithmic rules that eliminate
guessing, we create new existential variables $[[evar]]$ (for function domain)
and $[[evarb]]$ (for function codomain) and check the function body against
$[[evarb]]$. \Rref{gpc-inf-let} is similar to \rref{gpc-inf-lamann}.

\paragraph{Algorithmic Matching.}

\Rref{gpc-inf-app} deserves attention. It relies on the algorithmic matching
judgment $[[ GG |-G aA |> aA1 -> aA2 -| DD ]]$. The matching judgment
algorithmically synthesizes an arrow type from an arbitrary type.
\Rref{gpc-am-forall} replaces $a$ with a fresh existential variable $[[evar]]$,
thus eliminating guessing. \Rref{gpc-am-arr} and \rref{gpc-am-unknown} correspond directly to
the declarative rules. \Rref{gpc-am-var}, which has no corresponding declarative
version, is similar to \rref{gpc-instl-arr}/\rref*{gpc-instr-arr}: we create
$[[evar1]]$ and $[[evar2]]$ and solve $[[evar]] $ to $ [[evar1 -> evar2]]$ in
the output context.

Back to the \rref{gpc-inf-app}. This rule first infers the type of $[[e1]]$,
producing an output context $[[TT1]]$. Then it applies $[[TT1]]$ to $A$ and goes
into the matching judgment, which delivers an arrow type $[[aA1 -> aA2]]$ and
another output context $[[TT2]]$. $[[TT2]]$ is used as the input context when
checking $[[e2]]$ against $[[ [TT2]aA1 ]]$, where we go into the checking mode.


Rules in the checking mode are quite standard. \Rref{gpc-chk-lam} checks against
$[[aA1 -> aA2]]$. \Rref{gpc-chk-gen}, like the declarative \rref{gpc-gen}, adds a
type variable $[[a]]$ to the input context. \Rref{gpc-chk-sub} uses the
algorithmic consistent subtyping judgment.

\subsection{Decidability}

Our algorithmic system is decidable. It is not at all obvious to see why this is
the case, as many rules are not strictly structural (e.g., many rules have $[[
[GG]aA ]]$ in the premises). This implies that we need a more sophisticated
measure to support the argument. Since the typing rules (\Cref{fig:gradual:algo:typing})
depend on the consistent subtyping rules (\Cref{fig:gradual:algo:subtype}), which in
turn depends on the instantiation rules (\Cref{fig:gradual:algo:instantiate}), to show
the decidability of the typing judgment, we need to show that the instantiation
and consistent subtyping judgments are decidable. The proof strategy mostly
follows that of the DK system. Here only highlights of the proofs are given.

\paragraph{Decidability of Instantiation}

The basic idea is that we need to show $[[aA]]$ in the instantiation judgments
$[[GG |-G evar <~~ aA -| DD ]]$ and $[[GG |-G aA <~~ evar -| DD]]$ always gets
smaller. Most of the rules are structural and thus easy to verify (e.g.,
\rref{instl-forallR}); the non-trivial cases are \rref{instl-arr} and \rref{instr-arr}
where context applications appear in the premises. The key observation there is
that the instantiation rules preserve the size of (substituted) types. The
formal statement of decidability of instantiation needs a few pre-conditions:
assuming $[[evar]]$ is unsolved in the input context $[[GG]]$, that $[[aA]]$ is
well-formed under the context $[[GG]]$, that $[[aA]]$ is fully applied under the
input context $[[GG]]$ ($[[ [GG]aA ]] = [[aA]]$), and that $[[evar]]$ does not
occur in $[[aA]]$. Those conditions are actually met when instantiation is
invoked: \rref{chk-sub} applies the input context, and the subtyping rules apply
input context when needed.

\begin{restatable}[Decidability of Instantiation]{theorem}{decInstan}
  If $[[GG]]  = [[ GG0[evar]  ]]  $ and $[[  GG |-G aA  ]]$ such that $[[ [GG]aA  ]] = [[aA]]$ and $[[ evar notin fv(aA)   ]]$ then:
  \begin{enumerate}
  \item Either there exists $[[DD]]$ such that $[[GG |-G evar <~~ aA -| DD]]$, or not.
  \item Either there exists $[[DD]]$ such that $[[GG |-G aA <~~ evar -| DD]]$, or not.
  \end{enumerate}
\end{restatable}

\paragraph{Decidability of Algorithmic Consistent Subtyping}

Proving decidability of the algorithmic consistent subtyping is a bit more
involved, as the induction measure consists of several parts.
We measure the judgment $[[GG |-G aA1 <~ aA2 -| DD]]$ lexicographically by
\begin{enumerate}[(M1)]
\item the number of $\forall$-quantifiers in $[[aA1]]$ and $[[aA2]]$;
\item \hl{the number of unknown types in $[[aA1]]$ and $[[aA2]]$;}
\item $| \textsc{unsolved}([[GG]]) |$: the number of unsolved existential
  variables in $[[GG]]$;
\item $| [[GG |-G aA1]] | + | [[GG |-G aA2]]   |$.
\end{enumerate}
Notice that because of our gradual setting, we also need to measure the number
of unknown types (M2). This is a key difference from the DK system.
We refer the reader to \cref{app:decidable} for more details.
For (M4), we
use \emph{contextual size}---the size of well-formed types under certain
contexts, which penalizes solved variables (*).

\begin{definition}[Contextual Size] \leavevmode
  \begin{center}
    \begin{tabular}{llll}
      $|  [[GG |-G int]] |$     &=&  $1$ \\
      $|  [[GG |-G unknown]]    |$  &=&  $1$ \\
      $|  [[GG |-G a ]]  |$    &=&  $1$ \\
      $|  [[GG |-G evar]]  |$    &=&  $1$ \\
      $|  [[ GG[evar = at] |-G evar ]] |$    &=&  $1 + | [[  GG[evar = at] |-G at   ]]   | $ & $(*)$ \\
      $|  [[ GG |-G \/a . aA ]] |$    &=&  $1 + | [[  GG, a |-G aA ]]   | $ \\
      $|  [[ GG |-G aA1 -> aA2 ]] |$    &=&  $1 + | [[  GG |-G aA1 ]]   | + | [[ GG |-G aA2 ]] | $ \\
    \end{tabular}
  \end{center}
\end{definition}

\begin{restatable}[Decidability of Algorithmic Consistent Subtyping]{theorem}{decsubtype} \label{thm:decsubtype}
  Given a context $[[GG]]$ and types $[[aA1]]$, $[[aA2]]$
  such that $[[GG |-G aA1]]$ and $[[ GG |-G aA2 ]]$
  and $[[  [GG]aA1  ]] = [[aA1]]$ and $[[ [GG]aA2 ]] = [[aA2]]$,
  it is decidable whether there exists $[[DD]]$ such that $[[ GG |-G aA1 <~ aA2 -| DD    ]]$.
\end{restatable}

\paragraph{Decidability of Algorithmic Typing}

Similar to proving decidability of algorithmic consistent subtyping, the key is
to come up with a correct measure. Since the typing rules depend on the matching
judgment, we first show decidability of the algorithmic matching.

\begin{restatable}[Decidability of Algorithmic Matching]{lemma}{decmatch} \label{lemma:decmatch}%
  Given a context $[[GG]]$ and a type $[[aA]]$ it is decidable whether there
  exist types $[[aA1]]$, $[[aA2]]$ and a context $[[DD]]$ such that $[[ GG |-G aA |> aA1 -> aA2 -| DD ]]$.
\end{restatable}

Now we are ready to show decidability of typing. The proof is obtained by
induction on the lexicographically ordered triple: size of $[[ae]]$, typing
judgment (where the inference mode $[[=>]]$ is considered smaller than the
checking mode $[[<=]]$) and contextual size.
\begin{center}
  \begin{tabular}{lllll}
    \multirow{2}{*}{$ \Big \langle$} & \multirow{2}{*}{$[[ae]],$} & $[[=>]]$ & \multirow{2}{*}{$| [[GG |-G aA]] |$} & \multirow{2}{*}{$\Big \rangle$} \\
                                     &                    & $[[<=]],$ &  &
  \end{tabular}
\end{center}
The above measure is much simpler than the corresponding one in the DK system,
where they also need to consider the application judgment together with the
inference and checking judgments. This shows another benefit (besides the
independence from typing) of adopting the matching judgment.

\begin{restatable}[Decidability of Algorithmic Typing]{theorem}{dectyping} \leavevmode
  \begin{enumerate}
  \item Inference: Given  a context $[[GG]]$ and a term $[[ae]]$, it is decidable whether
    there exist a type $[[aA]]$ and a context $[[DD]]$ such that $[[GG |-G ae => aA -| DD]]$.
  \item Checking: Given a context $[[GG]]$, a term $[[ae]]$ and a type $[[aA]]$
    such that $[[GG |-G aA]]$, it is decidable whether there exists a context
    $[[DD]]$ such that $[[  GG |-G ae <= aA -| DD  ]]$.
  \end{enumerate}
\end{restatable}

\subsection{Context Extension}
\label{sec:gradual:ctxt:extension}

To be confident that our algorithmic type system and the declarative type system
agree with each other, we need to prove that the algorithmic rules are sound and
complete with respect to the declarative specification. Before we give the
formal statements of the soundness and completeness theorems, we need a
meta-theoretical device, called \emph{context extension}~\citep{DK}, to capture a
notion of information increase from input contexts to output contexts.


A context extension judgment $[[ GG --> DD ]]$ reads ``$[[GG]]$ is extended
by $[[DD]]$''. Intuitively, this judgment says that $[[DD]]$ has at least as
much information as $[[GG]]$: some unsolved existential variables in $[[GG]]$
may be solved in $[[DD]]$. The full inductive definition can be found
\Cref{fig:gradual:ctxt-extension}.

\begin{figure}
  \centering

  \begin{small}
    \drules[gpc-ext]{$ [[ GG --> DD  ]] $}{Context extension}{id, var, tvar, evar, solved, solve, add, addSolve, marker}
  \end{small}


  \caption{Context extension}
  \label{fig:gradual:ctxt-extension}
\end{figure}

\subsection{Soundness}

Roughly speaking, soundness of the algorithmic system says that given a
derivation of an algorithmic judgment with input context $[[GG]]$, output
context $[[DD]]$, and a complete context $[[OO]]$ that extends $[[DD]]$,
applying $[[OO]]$ throughout the given algorithmic judgment should yield a
derivable declarative judgment. For example, let us consider an algorithmic
typing judgment $[[ empty |-G \x . x => evar -> evar -| evar ]]$, and any
complete context, say, $[[OO]] = ([[ evar = int ]])$, then applying $[[OO]]$ to
the above judgment yields $[[ empty |-G \x . x : int -> int ]]$, which is
derivable in the declarative system.

However there is one complication: applying $[[OO]]$ to the algorithmic
expression does not necessarily yield a typable declarative expression. For
example, by \rref{gpc-chk-lam} we have $[[ \x .x ]] \Leftarrow [[ (\/a. a -> a) ->
(\/a. a -> a) ]] $, but $[[ \x . x]]$ itself cannot have type $[[ (\/a. a -> a)
-> (\/a. a -> a) ]]$ in the declarative system. To circumvent that, we add an
annotation to the lambda abstraction, resulting in $[[ \x : (\/a . a -> a) . x
]]$, which is typeable in the declarative system with the same type. To relate
$[[ \x . x ]]$ and $[[ \x : (\/a. a -> a) . x ]]$, we erase all annotations on
both expressions.
\begin{definition}[Type annotation erasure] The erasure function is denoted as
  $|\cdot|$, and defined as follows:
  \begin{center}
    \begin{tabular}{p{5cm}l}
      $[[|x| = x ]]$         & $[[|n| = n ]]$\\
      $[[|\x:A.e| = \x.|e| ]]$ & $[[|\x.e| = \x.|e|]]$\\
      $[[|e1 e2| = |e1| |e2| ]]$        & $[[|e : A | = |e|]]$
    \end{tabular}
  \end{center}
\end{definition}

\begin{restatable}[Instantiation Soundness]{theorem}{instsoundness} \label{thm:inst_soundness}%
  Given $[[ DD --> OO ]]$ and $[[ [GG]aA = aA ]]$ and  $[[evar notin fv(aA)]]$:

  \begin{enumerate}
  \item If $[[GG |-G evar <~~  aA -| DD ]]$ then $[[  [OO]DD |-G [OO]evar <~ [OO]aA  ]] $.
  \item If $[[GG |-G aA <~~ evar -| DD ]]$ then $[[  [OO]DD |-G [OO]aA <~ [OO]evar  ]] $.
  \end{enumerate}
\end{restatable}

Notice that the declarative judgment uses $[[ [OO]DD   ]]$, an
operation that applies a complete context $[[OO]]$ to the algorithmic context
$[[DD]]$, essentially plugging in all known solutions and removing all
declarations of existential variables (both solved and unsolved), resulting in a
declarative context.

With instantiation soundness, next we show that the algorithmic consistent
subtyping is sound:

\begin{restatable}[Soundness of Algorithmic Consistent Subtyping]{theorem}{subsoundness} \label{thm:sub_soundness}%
  If $[[  GG |-G aA1 <~ aA2 -| DD ]]$ where $[[ [GG]aA1 = aA1  ]]$ and $[[  [GG] aA2 = aA2  ]]$ and $[[  DD --> OO ]]$ then
  $[[  [OO]DD |-G [OO]aA1 <~ [OO]aA2   ]]$.
\end{restatable}

Finally the soundness theorem of algorithmic typing is:

\begin{restatable}[Soundness of Algorithmic Typing]{theorem}{typingsoundness} \label{thm:type_sound}%
  Given $[[DD --> OO]]$:
  \begin{enumerate}
  \item If $[[  GG |-G ae => aA -| DD  ]]$
    then $\exists [[e']]$ such that $ [[  [OO]DD |-G e' : [OO] aA  ]]   $
    and $[[|ae|]] = [[|e'|]]$.
  \item If $[[  GG |-G ae <= aA -| DD  ]]$
    then $\exists [[e']]$ such that $ [[  [OO]DD |-G e' : [OO] aA  ]]   $
    and $[[|ae|]] = [[|e'|]]$.
  \end{enumerate}
\end{restatable}

\subsection{Completeness}

Completeness of the algorithmic system is the reverse of soundness: given a
declarative judgment of the form $[[ [OO]GG ]] [[|-G]] [ [[OO]] ] \dots $,
we want to get an algorithmic derivation of $[[GG]] [[|-G]] \dots [[-|]] [[DD]]$.
It turns out that completeness is a bit trickier to state in that the
algorithmic rules generate existential variables on the fly, so $[[DD]]$ could
contain unsolved existential variables that are not found in $[[GG]]$, nor in
$[[OO]]$. Therefore the completeness proof must produce another complete context
$[[OO']]$ that extends both the output context $[[DD]]$, and the given complete
context $[[OO]]$. As with soundness, we need erasure to relate both expressions.

\begin{restatable}[Instantiation Completeness]{theorem}{instcomplete} \label{thm:inst_complete}
  Given $[[GG --> OO]]$ and $[[aA = [GG]aA]]$ and $[[evar]] \notin \textsc{unsolved}([[GG]]) $ and $[[  evar notin fv(aA)  ]]$:
  \begin{enumerate}
  \item If $[[ [OO]GG |-G [OO] evar <~ [OO]aA   ]]$ then there are $[[DD]], [[OO']]$ such that $[[OO --> OO']]$
    and $[[DD --> OO']]$ and $[[GG |-G evar <~~ aA -| DD]]$.
  \item If $[[ [OO]GG |-G [OO]aA  <~ [OO] evar  ]]$ then there are $[[DD]], [[OO']]$ such that $[[OO --> OO']]$
    and $[[DD --> OO']]$ and $[[GG |-G aA <~~ evar -| DD]]$.
  \end{enumerate}
\end{restatable}

Next is the completeness of consistent subtyping:

\begin{restatable}[Generalized Completeness of Consistent Subtyping]{theorem}{subcomplete} \label{thm:sub_completeness}
  If $[[ GG --> OO  ]]$ and $[[ GG |-G aA1  ]]$ and $[[ GG |-G aA2  ]]$ and $[[  [OO]GG |-G [OO]aA1 <~ [OO]aA2  ]]$ then
  there exist $[[DD]]$ and $[[OO']]$ such that $[[DD --> OO']]$ and $[[OO --> OO']]$ and $[[  GG |-G [GG]aA1 <~ [GG]aA2 -| DD ]]$.
\end{restatable}

We prove that the algorithmic matching is complete with respect to the
declarative matching:

\begin{restatable}[Matching Completeness]{theorem}{matchcomplete} \label{thm:match_complete}%
  Given $[[ GG --> OO  ]]$ and $[[ GG |-G aA  ]]$, if
  $[[ [OO]GG |-G [OO]aA |> A1 -> A2  ]]$
  then there exist $[[DD]]$, $[[OO']]$, $[[aA1']]$ and $[[aA2']]$ such that $[[ GG |-G [GG]aA |> aA1' -> aA2' -| DD   ]]$
  and $[[ DD --> OO'  ]]$ and $[[ OO --> OO'  ]]$ and $[[A1]] = [[ [OO']aA1'  ]]$ and $[[A2]] = [[ [OO']aA2'  ]]$.
\end{restatable}

Finally here is the completeness theorem of the algorithmic typing:

\begin{restatable}[Completeness of Algorithmic Typing]{theorem}{typingcomplete}
  \label{thm:type_complete}
  Given $[[GG --> OO]]$ and $[[GG |-G aA]]$, if $[[ [OO]GG |-G e : A ]]$ then there exist $[[DD]]$, $[[OO']]$, $[[aA']]$ and $[[ae']]$
  such that $[[DD --> OO']]$ and $[[OO --> OO']]$ and $[[  GG |-G ae' => aA' -| DD  ]]$ and $[[A]] = [[ [OO']aA'  ]]$ and $[[|e|]] = [[|ae'|]]$.
\end{restatable}

%%% Local Variables:
%%% mode: latex
%%% TeX-master: "../../Thesis"
%%% org-ref-default-bibliography: "../../Thesis.bib"
%%% End: