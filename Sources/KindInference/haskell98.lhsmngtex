%include polycode.fmt
%include rae.fmt

%if style == newcode
\begin{code}
  module Haskell98 where
\end{code}
%endif

\section{Datatypes in \hne}
\label{sec:kind:h98}

\begin{figure}
\begin{center}
   \begin{tabular}{llllllll} \toprule
     program                  & $[[pgm]]$ & $\Coloneqq$ & $[[rec </ dti // i/> ; pgm]] \mid [[e]]$ \\
     datatype decl.           & $[[dt]]$  & $\Coloneqq$ & $[[data T </ ai // i /> =  </ dcj // j /> ]] $ \\
     data c'tor decl.   & $[[dc]]$  & $\Coloneqq$ & $[[D </ ti // i />]] $ \\[2ex]

     expression & $[[e]]$   & $\Coloneqq$ & $\ldots$ \\[2ex]

     polytype  & $[[A]]$ & $\Coloneqq$ &$[[\/ </ ai : ki // i /> . t]]$ \\
     monotype  & $[[t]]$ & $\Coloneqq$ & $[[nat]] \mid [[a]] \mid [[T]] \mid [[t1 t2]] \mid [[->]]$ \\
     kind      & $[[k]]$ & $\Coloneqq$ & $[[star]] \mid [[k1 -> k2]]$ \\[2ex]

     term context  & $[[HH]]$ & $\Coloneqq$ & $[[empty]]
                                              \mid [[HH, D : A ]]$ \\
     type context  & $[[EE]]$ & $\Coloneqq$ & $[[empty]] \mid [[EE, a : k]] \mid [[EE, T : k ]]$ \\
 \bottomrule
   \end{tabular}\\[1ex]
 \end{center}
 \drules[pgm]{$[[EE ; HH |-p pgm : A]]$}{Typing Program}{expr,dt}
 \drules[dt]{$[[EE |- dt ~> HH]]$}{Typing Datatype Decl.}{decl}
 \drules[dc]{$[[EE |-dc t dc ~> t']]$}{Typing Data Constructor Decl.}{decl}
 \drules[k]{$[[EE |- t : k]]$}{Kinding}{var,tcon,nat,arrow,app}
 \caption{Declarative specification of \hne datatype declarations}
 \label{fig:kind:rules:98}
\end{figure}

We begin our formal presentation with \hne. The fragment of the syntax of \hne
that concerns us appears at the top of \Cref{fig:kind:rules:98}, including
datatype declarations, types, kinds, and contexts. The metavariable $[[e]]$
refers to expressions, but we do not elaborate the details of expressions'
syntax or typing rules here. A program $[[pgm]]$ is a sequence of groups
(defined below) of datatype declarations $[[dt]]$, followed by an expression
$[[e]]$. We write $[[t1 -> t2]]$ as an abbreviation for $([[->]]) [[t1 t2]]$.

\subsection{Groups and Dependency Analysis}
\label{sec:kind:dependency-analysis}


Users are free to write declarations in any order: earlier declarations
can depend on later ones in the same compilation unit. However,
any kind-checking algorithm must process the declarations in dependency order.
Complicating this is that type declarations may be mutually recursive.
A formal analysis of this dependency analysis is not enlightening, so
we consider it to be a preprocessing step that produces the grammar in
\Cref{fig:kind:rules:98}. This dependency analysis breaks up the (unordered) raw
input into mutually recursive groups (potentially containing just one declaration),
and puts these in dependency order. We use the term \emph{group} to describe a
set of mutually recursive declarations.

\subsection{Declarative Typing Rules}
\label{sec:kind:h98:decl-typing}

The declarative typing rules are in \Cref{fig:kind:rules:98}.
There are no surprises here; we review these rules briefly.
The top judgment is $[[EE;HH |-p pgm : A]]$. Its \rref{pgm-dt} extends
the input type context $[[EE]]$ with kinds for the datatype
declarations to
form $[[EE']]$, which is used to check both the datatype declarations and
the rest of the program. In \rref{pgm-dt},
we implicitly extract the names $\ottcomp{[[T]]}{i}$ from
  the declarations $\ottcomp{[[dt]]}{i}$ (and use this abuse of notation
throughout our work, relating $[[T]]$ to $[[dt]]$ and $[[D]]$ to $[[dc]]$).
The kinds are \emph{guessed} for an entire group all at once: they are added
to the context \emph{before} looking at the declarations.
This is needed because the declarations in the group refer to one
another.
Guessing the right answer is typical of declarative type systems.
The algorithmic system presented in \Cref{sec:kind:algo} provides a mechanism for an
implementation. %%Note that kinds are guessed for an entire group all at once.
Although there is no special judgment for typing a group of mutually recursive
datatypes, we use $[[EE |-grp rec </ dti // i /> ~> </ ki // i/> ; </ HHi // i
/>]]$ to denote that the kinding results of datatype declarations are
$\ottcomp{[[ki]]}{i}$, and the output term contexts are $\ottcomp{[[HHi]]}{i}$.

Declarations are checked with $[[EE |- dt ~> HH]]$.
This uses the guessed kinds to process the data constructors of a declaration,
producing a term context $[[HH]]$ with the data constructors and
their types. The \rref{dt-decl} ensures that the datatype has an
appropriate kind in the context and then checks data constructors
using the $[[|-dc]]$ judgment. These checks are done in a type context extended
with bindings for the type variables $[[</ ai // i />]]$, where each $[[ai]]$
has a kind extracted from the guessed kind of the datatype $[[T]]$. The subscript
on the $[[|-dc]]$ judgment is the return type of the constructors, whose types
are easily checked by \rref{dc-decl}.
The kinding judgment $[[EE |- t : k]]$ is standard.


%%% Local Variables:
%%% mode: latex
%%% TeX-master: "../../Thesis"
%%% org-ref-default-bibliography: "../../Thesis.bib"
%%% End:

%%  LocalWords:  polycode newcode endif decl c'tor HH MkQ MkP App FormData
%%  LocalWords:  DataList