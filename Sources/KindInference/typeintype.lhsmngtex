%include polycode.fmt
%include rae.fmt

%if style == newcode
\begin{code}
{-# LANGUAGE ExplicitForAll, PolyKinds, ExistentialQuantification, TypeInType
  #-}
{-# OPTIONS_GHC -Wno-unused-foralls #-}

module TypeInType where

import Data.Proxy ( Proxy(..) )

\end{code}
%endif

\section{Declarative Syntax and Semantics of \tit}
\label{sec:kind:tit:decl}

Having set the stage for kind inference for datatypes in \hne,
we now present the declarative \tit system.
Our syntax is given in \Cref{fig:kind:tit:syntax}. Compared to
\hne, programs $[[pgm]]$ now include datatype signatures $[[dtsig]]$.
Data constructor declarations $[[dc]]$ support existential quantification.
Types and kinds are collapsed into one level; $[[A]]$ and $[[K]]$ are now
synonymous metavariables and allow
prenex polymorphism, where variables in a kind binder $[[kvs]]$ can
optionally have kind annotations. Monotypes $[[t]]$ and $[[k]]$ allow visible kind
applications $[[t1 @@ t2]]$. Elaborated types $[[eA]]$, $[[eK]]$ are the result
of elaboration, which decorates source types to make them fully explicit.
This is done so that
checking equality of elaborated types is straightforward.
The syntax for elaborated types contains inferred polymorphism $[[\/i [ckvs]. eA]]$,
where complete free kind binders $[[ckvs]]$ have all variables annotated.
Elaborated monotypes $[[et]]$ and $[[ek]]$ share the same syntax as monotypes. We
informally use only $[[et]]$ or $[[ek]]$ for elaborated monotypes.

\subsection{Groups and Dependency Analysis}
\label{sec:kind:more-complicated-dependency}

Decomposition of signatures and definitions allows a more fine-grained control of
dependency analysis.
If |T| has a signature, and |S|
depends on |T|, then we can kind-check |S| without inspecting the definition of
|T|, because we know the kind of |T|. In other words, |S| only
depends on the \emph{signature} of |T|, not the \emph{definition} of |T|.
The complete dependency analysis rule, inspired by \citet[Section~11.6.3]{jones99typing}, is:

\begin{definition}[Dependency Analysis in \tit]\leavevmode
  \label{def:dep-cusk}
  \begin{enumerate}[(i)]
  \item If the signature/definition of $[[T1]]$ mentions $[[T2]]$, then:
    \begin{enumerate}
    \item if $[[T2]]$ has a signature, the signature/definition of $[[T1]]$ depends on
      the signature of $[[T2]]$;
    \item otherwise, the signature/definition of $[[T1]]$ depends on the definition of $[[T2]]$.
    \end{enumerate}
  \item A definition depends on its signature.
  \end{enumerate}
\end{definition}

To avoid a type that mentions itself in its own kind, we disallow
self-dependency or mutual dependency involving signatures. For example, a group
|cusk(T1 :: T2 a -> *)|; |cusk(T2 :: T1 -> *)| is rejected, lest |T1| be assigned
type |forall (a::T1). T2 a -> *|.
In other words, signatures do not form groups: they are always processed
individually. Moreover, the definition of a datatype which has a signature does
not join others in a group, as according to \Cref{def:dep-cusk}, there will be no
dependency from datatypes on it. This simplifies the kinding procedure, as we
will see in the coming section.

\begin{figure}
  \begin{center}
  \begin{tabular}{llll}\toprule
    program                  & $[[pgm]]$ & $\Coloneqq$ & $[[ sig dtsig ; pgm ]] \mid [[rec </ dti // i/> ; pgm]] \mid [[e]]$ \\
    datatype signature       & $[[dtsig]]$ & $\Coloneqq$ & $[[data T : A]] $ \\
    datatype decl.           & $[[dt]]$  & $\Coloneqq$ & $[[data T </ ai // i /> =  </ dcj // j /> ]] $ \\
    data constructor decl.   & $[[dc]]$  & $\Coloneqq$ & $ [[ \/ kvs . D </ ti // i />]]$ \\[2ex]

    type, kind           & $[[A]]$, $[[K]]$ & $\Coloneqq$ & $
                                                            % [[ \/i [kvs] . A ]] \mid
                                                            [[ \/s [kvs] . A]] \mid [[t]] $ \\

    monotype, monokind  & $[[t]], [[k]]$, $[[et]]$, $[[ek]]$ & $\Coloneqq$ & $[[star]] \mid [[nat]] \mid [[a]] \mid [[T]] \mid [[t1 t2]] \mid [[t1 @@t2]] \mid [[->]]$ \\
    elaborated type, kind & $[[eA]]$, $[[eK]]$ & $\Coloneqq$ & $[[ \/i [ckvs] . eA ]] \mid [[ \/s [ckvs] . eA]] \mid [[et]] $ \\[2ex]

    term context  & $[[HH]]$ & $\Coloneqq$ & $[[empty]]
                                             % \mid [[HH, x : eA]]
                                             \mid [[HH, D : eA ]]$ \\
    type context  & $[[EE]]$ & $\Coloneqq$ & $[[empty]] \mid [[EE, a : et]] \mid [[EE, T : eK ]]$ \\
    kind binder list & $[[ kvs ]]$ & $\Coloneqq$ & $[[empty]] \mid [[kvs, a]] \mid [[kvs, a : k]]  $ \\
    complete kind binder list & $[[ ckvs ]]$ & $\Coloneqq$ & $[[empty]] \mid [[ckvs, a:et]] $ \\
                              % & $[[ ikvs ]]$ & $\Coloneqq$ & $[[empty]] \mid [[ikvs, a:star]] $ \\
    \bottomrule
  \end{tabular}
  \end{center}
  \caption{Syntax of \tit}
  \label{fig:kind:tit:syntax}
\end{figure}

\begin{figure}
% \drules[sr]{$[[rs A]]$}{Kind results in $[[star]]$}{star,arrow,forall}
\drules[pgm]{$[[EE ; HH |-p pgm : A]]$}{Typing Program}{sig,dt-ttS,dt-tt}

\drules[sig]{$[[EE |- dtsig ~> T : eK]]$}{Typing Signature}{tt}

\drules[dt]{$[[EE |- dt ~> HH]]$}{Typing Datatype Decl.}{tt}

\begin{minipage}{.52\textwidth}
\drules[dc]{$[[EE |-dc et dc ~> eA]]$}{Typing Data Constructor Decl.}{tt}
\end{minipage}
\hspace{.04\textwidth}
\begin{minipage}{.42\textwidth}
\drules[]{$[[EE |-gen ckvs HH1 ~> HH2]]$}{Generalization}{gen}
\end{minipage}
\caption{Declarative specification of \tit}
\label{fig:kind:tit:decl}
\end{figure}

\begin{figure}
  \drules[inst]{$[[EE |- eA1 : eK <: ek ~> eA2]]$}{Instantiation}{refl,forall
    % ,forall-infer
  }
  \drules[kc]{$[[EE |- A <= ek ~> eA]]$}{Kind Checking}{sub}
  \drules[ktt]{$[[EE |- A : eK ~> eA]]$}{Kinding}{
    star
    % ,nat,var,arrow,tcon
    ,app,kapp
    % ,kapp-infer
    % ,forall
    ,foralli}
  \drules[ela]{$[[EE |-el eA : eK]]$}{Elaborated Kinding}{
    % star,nat,var,tcon,arrow,
    app,kapp
    % ,kapp-infer
    % ,forall,forall-infer
  }

  \caption{Selected rules for declarative kind-checking in \tit}
  \label{fig:kind:tit:kinding}
\end{figure}

The declarative typing rules appear in \Cref{fig:kind:tit:decl}.
The judgment $[[EE;HH |-p pgm : A]]$ checks the program. From now on we omit the
typing rule for expressions in programs, which is essentially the same as in
\hne.
\Rref{pgm-sig} processes kind signatures by elaborating and generalizing the
kind, then adding it to the context $[[EE]]$.
The helper judgment $[[EE |- dtsig ~> T : eK]]$ checks a kind signature
$[[data T : A]]$. First, it uses $[[rs A]]$ to ensure $[[A]]$ returns
$[[star]]$:
$[[rs A]]$ simply traverses over arrows and foralls, checking that the final kind of $[[A]]$
is $[[star]]$.
Then, as $[[A]]$ may be an open kind signature, it extracts the free kind variables
$[[kvs in  Q (A)]]$, where $[[Q (A)]]$ is the set of all well-formed
orderings of the free
variables (transitively looking into variables' kinds) of $[[A]]$;
 thus, $[[kvs]]$ is one such ordering.
As discussed in \Cref{sec:kind:tit-overview}, variables in
$[[kvs]]$ are \textit{inferred} so we accept any relative order,
as long as it features the necessary dependency between the variables. Then the
rule tries to elaborate ($[[|-k]]$) the kind $[[\/ [kvs]. A]]$, where $[[kvs]]$
and $[[ckvs]]$ have the same length ($[[ ||kvs|| = ||ckvs|| ]]$). As the
elaborated result $[[\/ [ckvs]. eK]]$ can be further generalized, we bring the free
variables $[[ckvs1 in Q(\/[ckvs]. eK)]]$ into scope when elaborating. The concluding output
is $[[T]]: [[\/i [ckvs1]. \/i [ckvs] . eK]]$. As an example, consider a kind signature $[[\/
a . b -> star]]$. We have $[[kvs = b]]$, $[[ckvs = b:star]]$, and $[[ckvs1 = c : star ]]$, and the
final kind is $[[\/i [c:star] . \/i [b:star]. \/ (a :c) . b -> star ]]$. We see
in this one example the three sources of quantified variables, always in this order:
variables arising from generalization (|c|), from implicit quantification
(|b|), and from explicit quantification (|a|).

Returning to the $[[|-p]]$ judgment, \rref{pgm-dt-ttS} checks a datatype definition that has a kind signature. It
ensures that the signature has already been checked, by fetching the kind
information in the context using $[[(T : eK) in EE]]$. Then it checks the
datatype declaration, and gathers the output term context to check the rest of
the program.
\Rref{pgm-dt-tt}, as in \hne, guesses kinds $[[eki]]$ for each datatype $[[Ti]]$
and puts $[[Ti:eki]]$ in the context \textit{before} looking at the declarations.
The major difference from \hne is that kinds can be generalized \textit{after}
the group is checked. We use $[[ckvsi]]$ to denote the free variables in each
kind $[[eki]]$. After the recursive group is typed, we generalize the kind of
each type constructor as well as the type of its data constructors.
To generalize the type of data constructors, we use the
$[[|-gen]]$ judgment. \Rref{gen} generalizes every data constructor in the context,
where $[[ckvs]]$ are
free type variables of its corresponding type constructor, and $[[ckvsi]]$ are free
type variables specific to the data constructor.
% We lift the judgment to the term context $[[HHi]]$.
Returning to \rref{pgm-dt-tt}, note that
since the kinds of type constructors are generalized, the occurrences of the
type constructors now require more type arguments. Therefore in $[[HH'i]]$, we
substitute $[[Ti]]$ with $[[ Ti @@[ckvsi] ]]$, where $[[Ti]]$ is applied to all
the variables bound in $[[ckvsi]]$.

The judgment of checking datatype declarations $[[EE |- dt ~> HH]]$ has only
\rref{dt-tt}, which expands on the rule in \hne, to support top-level polymorphism for the kind
of $[[T]]$.

\Rref{dc-tt} supports existential variables $[[kvs]]$. Moreover, the elaborated
type $[[eA]]$ of $[[\/kvs. </ ti // i /> ---> et]]$ can be further generalized
over $[[ckvs]]$. Note that $[[ckvs]]$ (via a small abuse of notation in the rule)
excludes free variables in
$[[ti]]$ and $[[EE]]$.

\subsection{Checking Kinds}

The kinding judgment $[[|-k]]$ appears in \Cref{fig:kind:tit:kinding}.
We only highlight selected rules.
Kinding $[[EE |- A : eK ~> eA]]$ infers the type $[[A]]$ to have kind $[[eK]]$,
and it elaborates $[[A]]$ to $[[eA]]$. The kinding rules are built
upon the axiom $[[EE |- star : star ~> star]]$ (\rref{ktt-star}). While this
axiom is known to violate logical consistency, as Haskell is already logically
inconsistent because of its general recursion, we do not consider it as an issue
here.
\Rref{ktt-app} concerns applications $[[t1 t2]]$. It first infers the kind of
$[[t1]]$ to be $[[eK1]]$. The kind $[[eK1]]$ can be a polymorphic kind headed by a $[[\/]]$,
though it
is expected to be a function kind. Thus the rule uses $[[|-inst]]$ to
instantiate $[[eK1]]$ to $[[ek1 -> ek2]]$. The instantiation judgment $[[EE |-
eA1 : eK <: ek ~> eA2]]$ instantiates a kind $[[eK]]$ to a monokind $[[ek]]$,
where if $[[eA1]]$ has kind $[[eK]]$ then $[[eA2]]$ has kind $[[ek]]$. After
instantiation, \rref{ktt-app} checks ($[[|-kc]]$) the argument $[[t2]]$ against
the expected argument kind $[[ek1]]$. The kind checking judgment $[[|-kc]]$
simply delegates the work to kinding and instantiation.
\Rref{ktt-kapp} checks visible kind applications. Note in the return kind
$[[eK]]$, the variable $[[a]]$ is substituted by the elaborated argument
$[[et2]]$. \Rref{ktt-foralli} elaborates an unannotated type $[[\/ a . A]]$ to
$[[\/ a : ek . eA]]$, where $[[ek]]$ is an \textit{elaborated} kind ($[[|-el]]$)
guessed for $[[a]]$.

The stand-alone elaborated kinding judgment $[[|-el]]$ type-checks elaborated
types. As all necessary instantiation has been done, type-checking for
elaborated types is easy. For example, \rref{ela-app} concerns
applications $[[et1 et2]]$. Compared to \rref{ktt-app}, here $[[et1]]$ has an
arrow kind, and takes exactly the kind of $[[et2]]$.
All judgments output well-formed elaborated types, as the following lemma states:

\begin{restatable}[Type Elaboration]{lemma}{lemmattwfkinding}
  \label{lemma:tt:wf_kinding}
  We have:
  \begin{inparaenum}
  \item if $[[EE |- A : eK ~> eA]]$, then $[[EE |-el eA : eK]]$;
  \item if $[[EE |- A <= eK ~> eA]]$, then $[[EE |-el eA : eK]]$;
  \item if $[[EE |-el eA1 : eK]]$,
    and $[[EE |- eA1 : eK <: ek ~> eA2]]$,
    then $[[EE |-el eA2 : ek]]$.
  \end{inparaenum}
\end{restatable}

%%% Local Variables:
%%% mode: latex
%%% TeX-master: "../../Thesis"
%%% org-ref-default-bibliography: "../../Thesis.bib"
%%% End:

%%  LocalWords:  polycode newcode ExplicitForAll PolyKinds TypeInType foralls
%%  LocalWords:  ExistentialQuantification endif poly cusk decl monokind
%%  LocalWords:  lemmattwfkinding